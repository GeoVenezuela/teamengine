<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
  <head>
    <title>Installation</title>
  </head>
  <body>
    <h1>Installation</h1>

    <h2>How to build</h2>
    <p>The source code is available from a Subversion repository hosted at SourceForge. The entire 
    tree may be <a href="http://sourceforge.net/p/teamengine/code/" target="_blank">viewed in a 
    browser</a>, including the commit logs. Use a Subversion client to checkout a working copy of 
    the trunk (main development branch) or a tagged release as indicated below.</p>

    <pre>
    $ svn checkout http://svn.code.sf.net/p/teamengine/code/trunk teamengine
    $ svn checkout http://svn.code.sf.net/p/teamengine/code/tags/4.0 teamengine-4.0
    </pre>

    <p>
      <a href="http://maven.apache.org/" target="_blank">Apache Maven 3.0</a> is 
    required to build the teamengine code base, which consists of the following 
    modules:</p>

    <ul>
      <li>teamengine-core: Main CTL script processor</li>
      <li>teamengine-resources: Includes shared resources such as stylesheets and schemas</li>
      <li>teamengine-spi: Provides an extensibility framework and a REST-like API for test execution</li>
      <li>teamengine-realm: A custom Tomcat user realm</li>
      <li>teamengine-web: A web application for executing test suites and browsing test results</li>
      <li>teamengine-console: A console application that provides a command-line interface for 
      executing test suites in Unix and Windows environments.</li>
    </ul>

    <p>Simply run <code>mvn package</code> in the root project directory to generate 
    all build artifacts, or run <code>mvn install</code> to install them into the local Maven 
    repository. The main build artifacts are listed below.</p>

    <dl>
      <dt><strong>teamengine-console-${project.version}-bin.[zip|tar.gz]</strong></dt>
      <dd>Archive containing the console application (command-line usage)</dd>
      <dt><strong>teamengine-console-${project.version}-base.[zip|tar.gz]</strong></dt>
      <dd>Archive containing the initial contents of the main configuration directory (TE_BASE)</dd>
      <dt><strong>teamengine.war</strong></dt>
      <dd>The JEE (Servlet) web application</dd>
      <dt><strong>teamengine-common-libs.[zip|tar.gz]</strong></dt>
      <dd>Archive containing common runtime dependencies (e.g. JAX-RS 1.1, Apache Derby)</dd>
    </dl>

    <p>Site documentation is generated by simply executing the 'mvn site' phase against 
    the top-level POM. An aggregrate PDF document is also created and placed in the 
    target/pdf directory.</p>

    <h2>Configuration</h2>
    <p>The value of the <code>TE_BASE</code> system property or environment variable 
    specifies the location of the main configuration directory that contains several 
    essential sub-directories. Create the TE_BASE directory (e.g. /srv/teamengine) 
    and unpack the contents of the teamengine-console-${project.version}-base archive into 
    this location; also ensure that users (including the Tomcat user) have write access. 
    The structure of the TE_BASE directory is shown below.</p>

    <pre>
TE_BASE
  |-- config.xml        # main configuration file
  |-- resources/        # shared test suite resources
  |-- scripts/          # CTL test scripts
  |-- work/             # teamengine work directory
  +-- users/
     |-- {user1}/       # user account details and test run outputs
     |-- {user2}/
     +-- ...
    </pre>

    <p><img src="./images/info-16px.png"/> <strong>Note:</strong> Some OGC test suites 
    make use of an embedded Apache Derby database containing the <a href="http://www.epsg.org/Geodetic.html" 
    target="_blank">EPSG geodetic parameters</a>. While not strictly necessary, it may be 
    convenient to create a Derby system directory to contain one or more databases (e.g. 
    DERBY_DATA, at /srv/derby).</p>

    <p>CTL test scripts are placed in the TE_BASE/scripts directory and the TE_BASE/config.xml 
    file is updated accordingly to register them. As a convenience, the shell script 
    <code>export-ctl</code> may be run to export CTL test suites from the official OGC repository. 
    The location of a CSV file is passed as the first argument to the script; each record in the 
    file should contain two fields: a Subversion URL, and a local path name relative to 
    TE_BASE/scripts.
    </p>
    <pre>
https://svn.opengeospatial.org/ogc-projects/cite/scripts/sensorml/1.0.1/trunk,\
sensorml/1.0.1
...</pre>

    <p>The <code>ctl-suites-dev.csv</code> file can be found in the same directory as the 
    shell scripts; it includes entries for the latest development versions of several OGC 
    test suites. Running the following command will populate the TE_BASE/scripts directory 
    with these test suites:</p>
    <pre>
$ export TE_BASE=/some/path
$ ./export-ctl.sh ctl-suites-dev.csv</pre>

    <p>
    A new installation already contains an entry for a sample test script ("XML Note"). To enable 
    another test suite an entry for it must appear in the configuration file; simply insert the 
    &lt;standard&gt; element into the file under the matching organization (name). The following 
    listing includes a sample entry.
    </p>

    <pre>
&lt;standard&gt;
  &lt;name&gt;Web Map Tile Service (WMTS)&lt;/name&gt;
  &lt;version&gt;
    &lt;name&gt;1.0.0&lt;/name&gt;
    &lt;suite&gt;
      &lt;namespace-uri&gt;http://www.opengis.net/wmts/1.0&lt;/namespace-uri&gt;
      &lt;prefix&gt;wmts&lt;/prefix&gt;
      &lt;local-name&gt;server.suite.base&lt;/local-name&gt;
      &lt;title&gt;WMTS 1.0 Conformance Test Suite&lt;/title&gt;
      &lt;description&gt;
      Checks WMTS implementations for conformance to OGC 07-057r7.
      &lt;/description&gt;
    &lt;/suite&gt;
    &lt;revision&gt;
      &lt;name&gt;r1&lt;/name&gt;
      &lt;sources&gt;
        &lt;source&gt;wmts/1.0.0/ctl&lt;/source&gt;
      &lt;/sources&gt;
      &lt;resources&gt;wmts/1.0.0/resources&lt;/resources&gt;
      &lt;webdir&gt;wmts/1.0.0/web&lt;/webdir&gt;
      &lt;profile&gt;
        &lt;namespace-uri&gt;http://www.opengis.net/wmts/1.0&lt;/namespace-uri&gt;
        &lt;prefix&gt;wmts&lt;/prefix&gt;
        &lt;local-name&gt;server.profile.kvp.get&lt;/local-name&gt;
        &lt;title&gt;GET binding&lt;/title&gt;
      &lt;/profile&gt;
      &lt;profile&gt;
        &lt;namespace-uri&gt;http://www.opengis.net/wmts/1.0&lt;/namespace-uri&gt;
        &lt;prefix&gt;wmts&lt;/prefix&gt;
        &lt;local-name&gt;server.profile.kvp.post&lt;/local-name&gt;
        &lt;title&gt;POST/KVP binding&lt;/title&gt;
      &lt;/profile&gt;
    &lt;/revision&gt;
  &lt;/version&gt;
&lt;/standard&gt;
    </pre>

    <h2>Deploying the web application</h2>

    <h3>System requirements</h3>
    <p>
      <ul>
        <li>Java runtime: Oracle JDK 7 (<a href="www.oracle.com/technetwork/java/javase/downloads/">
        latest production release)</a></li>
        <li>Servlet container: Apache Tomcat 7.0 (<a href="http://tomcat.apache.org/download-70.cgi">
        latest production release</a>)</li>
      </ul>
    </p>

    <h3>Create a dedicated Tomcat instance</h3>

    <p>Apache Tomcat 7.0 is a supported servlet container. It is strongly recommended that a 
    dedicated Tomcat instance be created to host the teamengine application. Create one as 
    suggested below.</p>

    <p>Create a CATALINA_BASE directory (Windows):</p>
    <pre>
> mkdir base-1 &amp; cd base-1
> xcopy %CATALINA_HOME%\conf conf\
> mkdir lib logs temp webapps work
</pre>

<p>Create a CATALINA_BASE directory (GNU/Linux):</p>
<pre>
$ sudo mkdir -p /srv/tomcat/base-1; cd /srv/tomcat/base-1
$ sudo cp -r $CATALINA_HOME/conf .
$ sudo mkdir lib logs temp webapps work
</pre>

<p>The recommended JVM options for the Tomcat instance are indicated below. Note that the 
maximum memory heap size (<code>-Xmx</code>) may need to be increased as the number 
of concurrent users increases.</p>

<p>
  <code>CATALINA_OPTS="-server -Xmx1024m -XX:MaxPermSize=128m -DTE_BASE=$TE_BASE -Dderby.system.home=$DERBY_DATA"</code>
</p>

<p>Unpack the contents of the teamengine-common-libs archive into the CATALINA_BASE/lib 
directory. Deploy the <code>teamengine.war</code> component by either copying it to the 
CATALINA_BASE/webapps directory or using the Tomcat <em>Manager</em> application. Start 
the Tomcat instance. The URIs listed below provide starting points for discovering and 
executing test suites. Modify the path if the name of the WAR file (and hence the context 
path) has been changed from the default value "teamengine".</p>

<ul>
  <li>/teamengine - Home page for selecting and running CTL test suites</li>
  <li>/teamengine/rest/suites - Presents a listing of available (TestNG) test suites, 
  with links to test suite documentation</li>
</ul>

<h3>Customizing the welcome page</h3>
<p>Several elements of the welcome page may be customized if desired: the logo in 
    the header, the main text, and the content in the footer. The files in the /site 
    directory of the web application can be modified in order to provide site-specific 
    content (see Table 1). Tomcat does not need to be restarted to make the changes 
    visible.</p>

<table>
  <caption>Table 1 - Site content</caption>
  <tbody>
    <tr>
      <td>site/logo.png</td>
      <td>The logo that appears in the header (at top left). The size of the 
          default image is 127x58 px.</td>
    </tr>
    <tr>
      <td>site/welcome.txt</td>
      <td>The main text.</td>
    </tr>
    <tr>
      <td>site/footer.txt</td>
      <td>Footer content.</td>
    </tr>
  </tbody>
</table>

</body>
</html>
