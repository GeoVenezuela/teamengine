<?xml version="1.0" encoding="UTF-8"?>
<schema targetNamespace="http://www.opengis.net/gml" 
  xmlns="http://www.w3.org/2001/XMLSchema" 
  xmlns:sch="http://www.ascc.net/xml/schematron" 
  xmlns:gml="http://www.opengis.net/gml" 
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  elementFormDefault="qualified"
  version="3.1.1">
    <annotation>
        <documentation>Copyright (c) 2001-2005 OGC, All Rights Reserved.
    For conditions, see OGC Software Notice http://www.opengeospatial.org/about/?page=ipr</documentation>
    </annotation>
	
    <import namespace="http://www.w3.org/1999/xlink" schemaLocation="xlink-1.0.xsd"/>
      
	<!-- abstract supertype for geometry objects  -->
	<element name="_Geometry" type="gml:AbstractGeometryType" abstract="true" substitutionGroup="gml:_GML">
		<annotation>
			<documentation>The "_Geometry" element is the abstract head of the substituition group for all geometry elements of GML 3. This 
			includes pre-defined and user-defined geometry elements. Any geometry element must be a direct or indirect extension/restriction 
			of AbstractGeometryType and must be directly or indirectly in the substitution group of "_Geometry".</documentation>
			<appinfo>
				<sch:pattern name="Check SRS tags">
					<sch:rule context="gml:_Geometry">
						<sch:extends rule="CRSLabels"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
		</annotation>
	</element>
	<!-- ============================================================== -->
	<complexType name="GeometryPropertyType">
		<annotation>
			<documentation>A geometric property can either be any geometry element encapsulated in an element of this type or an XLink reference 
			to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Note that either 
			the reference or the contained element must be given, but not both or none.</documentation>
		</annotation>
		<sequence minOccurs="0">
			<element ref="gml:_Geometry"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup">
			<annotation>
				<documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference 
				remote resources (including those elsewhere in the same document). A simple link element can be constructed by 
				including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation 
				of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create 
				sophisticated links between resources; such links can be used to reference remote properties. A simple link element 
				can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by 
				including the gml:AssociationAttributeGroup.</documentation>
			</annotation>
		</attributeGroup>
	</complexType>
	<!-- ============================================================== -->
	<complexType name="GeometryArrayPropertyType">
		<annotation>
			<documentation>A container for an array of geometry elements. The elements are always contained in the array property, 
			referencing geometry elements or arrays of geometry elements is not supported.</documentation>
		</annotation>
		<sequence>
			<element ref="gml:_Geometry" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!-- ============================================================== -->
	<complexType name="AbstractGeometryType" abstract="true">
		<annotation>
			<documentation>All geometry elements are derived directly or indirectly from this abstract supertype. A geometry element may 
			have an identifying attribute ("gml:id"), a name (attribute "name") and a description (attribute "description"). It may be associated 
			with a spatial reference system (attribute "srsName"). The following rules shall be adhered: - Every geometry type shall derive 
			from this abstract type. - Every geometry element (i.e. an element of a geometry type) shall be directly or indirectly in the 
			substitution group of _Geometry.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGMLType">
				<attribute name="gid" type="string" use="optional">
					<annotation>
						<documentation>This attribute is included for backward compatibility with GML 2 and is deprecated with GML 3. 
						This identifer is superceded by "gml:id" inherited from AbstractGMLType. The attribute "gid" should not be used 
						anymore and may be deleted in future versions of GML without further notice.</documentation>
					</annotation>
				</attribute>
				<attributeGroup ref="gml:SRSReferenceGroup"/>
			</extension>
		</complexContent>
	</complexType>
	<!-- ============================================================== -->
	<attributeGroup name="SRSReferenceGroup">
		<annotation>
			<documentation>Optional reference to the CRS used by this geometry, with optional additional information to simplify use when 
			a more complete definition of the CRS is not needed.</documentation>
		</annotation>
		<attribute name="srsName" type="anyURI" use="optional">
			<annotation>
				<documentation>In general this reference points to a CRS instance of gml:CoordinateReferenceSystemType 
				(see coordinateReferenceSystems.xsd). For well known references it is not required that the CRS description exists at the 
				location the URI points to. If no srsName attribute is given, the CRS must be specified as part of the larger context this 
				geometry element is part of, e.g. a geometric element like point, curve, etc. It is expected that this attribute will be specified 
				at the direct position level only in rare cases.</documentation>
			</annotation>
		</attribute>
		<attribute name="srsDimension" type="positiveInteger" use="optional">
			<annotation>
				<documentation>The "srsDimension" is the length of coordinate sequence (the number of entries in the list). This dimension is 
				specified by the coordinate reference system. When the srsName attribute is omitted, this attribute shall be omitted.</documentation>
			</annotation>
		</attribute>
		<attributeGroup ref="gml:SRSInformationGroup"/>
	</attributeGroup>
	<!-- =================================================== -->
	<attributeGroup name="SRSInformationGroup">
		<annotation>
			<documentation>Optional additional and redundant information for a CRS to simplify use when a more complete definition of the 
			CRS is not needed. This information shall be the same as included in the more complete definition of the CRS, referenced by the 
			srsName attribute. When the srsName attribute is included, either both or neither of the axisLabels and uomLabels attributes 
			shall be included. When the srsName attribute is omitted, both of these attributes shall be omitted.</documentation>
		</annotation>
		<attribute name="axisLabels" type="gml:NCNameList" use="optional">
			<annotation>
				<documentation>Ordered list of labels for all the axes of this CRS. The gml:axisAbbrev value should be used for these axis 
				labels, after spaces and forbiddden characters are removed. When the srsName attribute is included, this attribute is optional. 
				When the srsName attribute is omitted, this attribute shall also be omitted.</documentation>
			</annotation>
		</attribute>
		<attribute name="uomLabels" type="gml:NCNameList" use="optional">
			<annotation>
				<documentation>Ordered list of unit of measure (uom) labels for all the axes of this CRS. The value of the string in the 
				gml:catalogSymbol should be used for this uom labels, after spaces and forbiddden characters are removed. When the 
				axisLabels attribute is included, this attribute shall also be included. When the axisLabels attribute is omitted, this attribute 
				shall also be omitted.</documentation>
			</annotation>
		</attribute>
	</attributeGroup>
	<!-- ============================================================== -->
	<element name="_GeometricPrimitive" type="gml:AbstractGeometricPrimitiveType" abstract="true" substitutionGroup="gml:_Geometry">
		<annotation>
			<documentation>The "_GeometricPrimitive" element is the abstract head of the substituition group for all (pre- and user-defined) 
			geometric primitives.</documentation>
		</annotation>
	</element>
	<!-- ============================================================== -->
	<complexType name="AbstractGeometricPrimitiveType" abstract="true">
		<annotation>
			<documentation>This is the abstract root type of the geometric primitives. A geometric primitive is a geometric object that is not 
			decomposed further into other primitives in the system. All primitives are oriented in the direction implied by the sequence of their 
			coordinate tuples.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGeometryType"/>
		</complexContent>
	</complexType>
	<!-- ============================================================== -->
	<complexType name="GeometricPrimitivePropertyType">
		<annotation>
			<documentation>A property that has a geometric primitive as its value domain can either be an appropriate geometry element 
			encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry 
			elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither 
			both nor none.</documentation>
		</annotation>
		<sequence minOccurs="0">
			<element ref="gml:_GeometricPrimitive"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup">
			<annotation>
				<documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote 
				resources (including those elsewhere in the same document). A simple link element can be constructed by including a 
				specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide 
				Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between 
				resources; such links can be used to reference remote properties. A simple link element can be used to implement pointer 
				functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
			</annotation>
		</attributeGroup>
	</complexType>
	<!-- =========================================================== -->
	<!-- primitive geometry objects (0-dimensional) -->
	<!-- ============================================================== -->
	<element name="Point" type="gml:PointType" substitutionGroup="gml:_GeometricPrimitive"/>
	<!-- ============================================================== -->
	<complexType name="PointType">
		<annotation>
			<documentation>A Point is defined by a single coordinate tuple.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGeometricPrimitiveType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the direct poisiton of a point. 1. The "pos" element is of type 
							DirectPositionType.</documentation>
						</annotation>
						<element ref="gml:pos"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0 for coordinates with ordinate values that are numbers. Use "pos" 
								instead. The "coordinates" element shall only be used for coordinates with ordinates that require a string 
								representation, e.g. DMS representations.</documentation>
							</annotation>
						</element>
						<element ref="gml:coord">
							<annotation>
								<documentation>Deprecated with GML version 3.0. Use "pos" instead. The "coord" element is included for 
								backwards compatibility with GML 2.</documentation>
							</annotation>
						</element>
					</choice>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- ============================================================== -->
	<element name="pointProperty" type="gml:PointPropertyType">
		<annotation>
			<appinfo>
				<sch:pattern name="Check either href or content not both">
					<sch:rule context="gml:pointProperty">
						<sch:extends rule="hrefOrContent"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
			<documentation>This property element either references a point via the XLink-attributes or contains the point element. pointProperty 
			is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that 
			is substitutable for Point.</documentation>
		</annotation>
	</element>
	<!-- ============================================================== -->
	<element name="pointRep" type="gml:PointPropertyType">
		<annotation>
			<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</documentation>
		</annotation>
	</element>
	<!-- ============================================================== -->
	<complexType name="PointPropertyType">
		<annotation>
			<documentation>A property that has a point as its value domain can either be an appropriate geometry element encapsulated in an 
			element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located 
			elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
		</annotation>
		<sequence minOccurs="0">
			<element ref="gml:Point"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup">
			<annotation>
				<documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote 
				resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific 
				set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. 
				XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be 
				used to reference remote properties. A simple link element can be used to implement pointer functionality, and this functionality has 
				been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
			</annotation>
		</attributeGroup>
	</complexType>
	<!-- ============================================================== -->
	<element name="pointArrayProperty" type="gml:PointArrayPropertyType"/>
	<!-- =========================================================== -->
	<complexType name="PointArrayPropertyType">
		<annotation>
			<documentation>A container for an array of points. The elements are always contained in the array property, referencing geometry 
			elements or arrays of geometry elements is not supported.</documentation>
		</annotation>
		<sequence>
			<element ref="gml:Point" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<!-- primitive geometry objects (1-dimensional) -->
	<!-- ============================================================== -->
	<element name="_Curve" type="gml:AbstractCurveType" abstract="true" substitutionGroup="gml:_GeometricPrimitive">
		<annotation>
			<documentation>The "_Curve" element is the abstract head of the substituition group for all (continuous) curve elements.</documentation>
		</annotation>
	</element>
	<!-- ============================================================== -->
	<complexType name="AbstractCurveType" abstract="true">
		<annotation>
			<documentation>An abstraction of a curve to support the different levels of complexity. The curve can always be viewed as a geometric 
			primitive, i.e. is continuous.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGeometricPrimitiveType"/>
		</complexContent>
	</complexType>
	<!-- ============================================================== -->
	<element name="curveProperty" type="gml:CurvePropertyType">
		<annotation>
			<appinfo>
				<sch:pattern name="Check either href or content not both">
					<sch:rule context="gml:curveProperty">
						<sch:extends rule="hrefOrContent"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
			<documentation>This property element either references a curve via the XLink-attributes or contains the curve element. curveProperty is the 
			predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is 
			substitutable for _Curve.</documentation>
		</annotation>
	</element>
	<!-- ============================================================== -->
	<complexType name="CurvePropertyType">
		<annotation>
			<documentation>A property that has a curve as its value domain can either be an appropriate geometry element encapsulated in an 
			element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere 
			in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
		</annotation>
		<sequence minOccurs="0">
			<element ref="gml:_Curve"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup">
			<annotation>
				<documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote 
				resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific 
				set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. 
				XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used 
				to reference remote properties. A simple link element can be used to implement pointer functionality, and this functionality has been built 
				into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
			</annotation>
		</attributeGroup>
	</complexType>
	<!-- ============================================================== -->
	<element name="curveArrayProperty" type="gml:CurveArrayPropertyType"/>
	<!-- =========================================================== -->
	<complexType name="CurveArrayPropertyType">
		<annotation>
			<documentation>A container for an array of curves. The elements are always contained in the array property, referencing geometry elements 
			or arrays of geometry elements is not supported.</documentation>
		</annotation>
		<sequence>
			<element ref="gml:_Curve" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<element name="LineString" type="gml:LineStringType" substitutionGroup="gml:_Curve"/>
	<!-- =========================================================== -->
	<complexType name="LineStringType">
		<annotation>
			<documentation>A LineString is a special curve that consists of a single segment with linear interpolation. It is defined by two or more coordinate 
			tuples, with linear interpolation between them. It is backwards compatible with the LineString of GML 2, GM_LineString of ISO 19107 is 
			implemented by LineStringSegment.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the control points of a line string. 1. A sequence of "pos" 
							(DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part 
							of this curve, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference 
							another point defined outside of this curve (reuse of existing points). 2. The "posList" element allows for a compact way to 
							specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong 
							to this curve only. The number of direct positions in the list must be at least two.</documentation>
						</annotation>
						<choice minOccurs="2" maxOccurs="unbounded">
							<element ref="gml:pos"/>
							<element ref="gml:pointProperty"/>
							<element ref="gml:pointRep">
								<annotation>
									<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility 
									with GML 3.0.0.</documentation>
								</annotation>
							</element>
							<element ref="gml:coord">
								<annotation>
									<documentation>Deprecated with GML version 3.0. Use "pos" instead. The "coord" element is included for backwards 
									compatibility with GML 2.</documentation>
								</annotation>
							</element>
						</choice>
						<element ref="gml:posList"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</documentation>
							</annotation>
						</element>
					</choice>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- ============================================================== -->
	<!-- positions -->
	<!-- =========================================================== -->
	<element name="pos" type="gml:DirectPositionType">
		<annotation>
			<appinfo>
				<sch:pattern name="Check SRS tags">
					<sch:rule context="gml:pos">
						<sch:extends rule="CRSLabels"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
		</annotation>
	</element>
	<!-- ============================================================== -->
	<complexType name="DirectPositionType">
		<annotation>
			<documentation>DirectPosition instances hold the coordinates for a position within some coordinate reference system (CRS). Since 
			DirectPositions, as data types, will often be included in larger objects (such as geometry elements) that have references to CRS, the 
			"srsName" attribute will in general be missing, if this particular DirectPosition is included in a larger element with such a reference to a 
			CRS. In this case, the CRS is implicitly assumed to take on the value of the containing object's CRS.</documentation>
		</annotation>
		<simpleContent>
			<extension base="gml:doubleList">
				<attributeGroup ref="gml:SRSReferenceGroup"/>
			</extension>
		</simpleContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="posList" type="gml:DirectPositionListType">
		<annotation>
			<appinfo>
				<sch:pattern name="Check SRS tags">
					<sch:rule context="gml:posList">
						<sch:extends rule="CRSLabels"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
			<appinfo>
				<sch:pattern name="Check Dimension">
					<sch:rule context="gml:posList">
						<sch:extends rule="Count"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
		</annotation>
	</element>
	<!-- ============================================================== -->
	<complexType name="DirectPositionListType">
		<annotation>
			<documentation>DirectPositionList instances hold the coordinates for a sequence of direct positions within the same coordinate 
			reference system (CRS).</documentation>
		</annotation>
		<simpleContent>
			<extension base="gml:doubleList">
				<attributeGroup ref="gml:SRSReferenceGroup"/>
				<attribute name="count" type="positiveInteger" use="optional">
					<annotation>
						<documentation>"count" allows to specify the number of direct positions in the list. If the attribute count is present then 
						the attribute srsDimension shall be present, too.</documentation>
					</annotation>
				</attribute>
			</extension>
		</simpleContent>
	</complexType>
	<!-- ============================================================== -->
	<element name="vector" type="gml:VectorType">
		<annotation>
			<appinfo>
				<sch:pattern name="Check SRS tags">
					<sch:rule context="gml:vector">
						<sch:extends rule="CRSLabels"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
		</annotation>
	</element>
	<!-- ============================================================== -->
	<complexType name="VectorType">
		<annotation>
			<documentation>Vector instances hold the compoents for a (usually spatial) vector within some coordinate reference system (CRS). 
			Since Vectors will often be included in larger objects that have references to CRS, the "srsName" attribute may be missing. 
			In this case, the CRS is implicitly assumed to take on the value of the containing object's CRS.

			Note that this content model is the same as DirectPositionType, but is defined separately to reflect the distinct semantics, and to avoid validation problems. SJDC 2004-12-02</documentation>
		</annotation>
		<simpleContent>
			<extension base="gml:doubleList">
				<attributeGroup ref="gml:SRSReferenceGroup"/>
			</extension>
		</simpleContent>
	</complexType>
	<!-- ============================================================== -->
	<group name="geometricPositionGroup">
		<annotation>
			<documentation>A geometric position represented either by a DirectPosition or a Point.</documentation>
		</annotation>
		<choice>
			<element ref="gml:pos"/>
			<element ref="gml:pointProperty"/>
		</choice>
	</group>
	<!-- ============================================================== -->
	<group name="geometricPositionListGroup">
		<annotation>
			<documentation>A list of geometric positions represented either by a DirectPosition or a Point.</documentation>
		</annotation>
		<choice>
			<element ref="gml:posList"/>
			<group ref="gml:geometricPositionGroup" maxOccurs="unbounded"/>
		</choice>
	</group>
	<!-- ============================================================== -->
	<element name="coordinates" type="gml:CoordinatesType">
		<annotation>
			<documentation>Deprecated with GML version 3.1.0.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<!-- Envelope -->
	<!-- =========================================================== -->
	<element name="Envelope" type="gml:EnvelopeType"/>
	<!-- =========================================================== -->
	<complexType name="EnvelopeType">
		<annotation>
			<documentation>Envelope defines an extent using a pair of positions defining opposite corners in arbitrary dimensions. The first direct 
			position is the "lower corner" (a coordinate position consisting of all the minimal ordinates for each dimension for all points within the envelope), 
			the second one the "upper corner" (a coordinate position consisting of all the maximal ordinates for each dimension for all points within the 
			envelope).</documentation>
		</annotation>
		<choice>
			<sequence>
				<element name="lowerCorner" type="gml:DirectPositionType"/>
				<element name="upperCorner" type="gml:DirectPositionType"/>
			</sequence>
			<element ref="gml:coord" minOccurs="2" maxOccurs="2">
				<annotation>
					<appinfo>deprecated</appinfo>
					<documentation>deprecated with GML version 3.0</documentation>
				</annotation>
			</element>
			<element ref="gml:pos" minOccurs="2" maxOccurs="2">
				<annotation>
					<appinfo>deprecated</appinfo>
					<documentation>Deprecated with GML version 3.1. Use the explicit properties "lowerCorner" and "upperCorner" instead.</documentation>
				</annotation>
			</element>
			<element ref="gml:coordinates">
				<annotation>
					<documentation>Deprecated with GML version 3.1.0. Use the explicit properties "lowerCorner" and "upperCorner" instead.</documentation>
				</annotation>
			</element>
		</choice>
		<attributeGroup ref="gml:SRSReferenceGroup"/>
	</complexType>
	<!-- =========================================================== -->
	<!-- =========================================================== -->
	<!-- =========================================================== -->
	<!--  	 	The following types and elements are deprecated and should not be used ! 	 	-->
	<element name="coord" type="gml:CoordType">
		<annotation>
			<documentation>Deprecated with GML 3.0 and included for backwards compatibility with GML 2. Use the "pos" element instead.</documentation>
		</annotation>
	</element>
	<complexType name="CoordType">
		<annotation>
			<documentation>Represents a coordinate tuple in one, two, or three dimensions. Deprecated with GML 3.0 and replaced by 
			DirectPositionType.</documentation>
		</annotation>
		<sequence>
			<element name="X" type="decimal"/>
			<element name="Y" type="decimal" minOccurs="0"/>
			<element name="Z" type="decimal" minOccurs="0"/>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<element name="lineStringProperty" type="gml:LineStringPropertyType">
		<annotation>
			<documentation>Deprecated with GML 3.0 and included only for backwards compatibility with GML 2.0. Use "curveProperty" instead. This 
			property element either references a line string via the XLink-attributes or contains the line string element.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="LineStringPropertyType">
		<annotation>
			<documentation>This type is deprecated with GML 3 and shall not be used. It is included for backwards compatibility with GML 2. Use 
			CurvePropertyType instead. A property that has a line string as its value domain can either be an appropriate geometry element encapsulated 
			in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere 
			in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
		</annotation>
		<sequence minOccurs="0">
			<element ref="gml:LineString"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup">
			<annotation>
				<documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources 
				(including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. 
				The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to 
				be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties. 
				A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by 
				including the gml:AssociationAttributeGroup.</documentation>
			</annotation>
		</attributeGroup>
	</complexType>
	
	<!-- primitive geometry objects (2-dimensional) -->
	<element name="_Surface" type="gml:AbstractSurfaceType" abstract="true" substitutionGroup="gml:_GeometricPrimitive">
		<annotation>
			<documentation>The "_Surface" element is the abstract head of the substituition group for all (continuous) surface elements.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="AbstractSurfaceType">
		<annotation>
			<documentation>An abstraction of a surface to support the different levels of complexity. A surface is always a continuous region of a plane.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGeometricPrimitiveType"/>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="surfaceProperty" type="gml:SurfacePropertyType">
		<annotation>
			<appinfo>
				<sch:pattern name="Check either href or content not both">
					<sch:rule context="gml:surfaceProperty">
						<sch:extends rule="hrefOrContent"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
			<documentation>This property element either references a surface via the XLink-attributes or contains the surface element. surfaceProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for _Surface.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="SurfacePropertyType">
		<annotation>
			<documentation>A property that has a surface as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
		</annotation>
		<sequence minOccurs="0">
			<element ref="gml:_Surface"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup">
			<annotation>
				<documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
			</annotation>
		</attributeGroup>
	</complexType>
	<!-- =========================================================== -->
	<element name="surfaceArrayProperty" type="gml:SurfaceArrayPropertyType"/>
	<!-- =========================================================== -->
	<complexType name="SurfaceArrayPropertyType">
		<annotation>
			<documentation>A container for an array of surfaces. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements is not supported.</documentation>
		</annotation>
		<sequence>
			<element ref="gml:_Surface" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<element name="Polygon" type="gml:PolygonType" substitutionGroup="gml:_Surface"/>
	<!-- =========================================================== -->
	<complexType name="PolygonType">
		<annotation>
			<documentation>A Polygon is a special surface that is defined by a single surface patch. The boundary of this patch is coplanar and the polygon uses planar interpolation in its interior. It is backwards compatible with the Polygon of GML 2, GM_Polygon of ISO 19107 is implemented by PolygonPatch.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractSurfaceType">
				<sequence>
					<element ref="gml:exterior" minOccurs="0"/>
					<element ref="gml:interior" minOccurs="0" maxOccurs="unbounded"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<!-- rings (closed curves for surface boundaries) -->
	<!-- =========================================================== -->
	<element name="_Ring" type="gml:AbstractRingType" abstract="true" substitutionGroup="gml:_Geometry">
		<annotation>
			<documentation>The "_Ring" element is the abstract head of the substituition group for all closed boundaries of a surface patch.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="AbstractRingType" abstract="true">
		<annotation>
			<documentation>An abstraction of a ring to support surface boundaries of different complexity.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGeometryType"/>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="exterior" type="gml:AbstractRingPropertyType">
		<annotation>
			<documentation>A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.</documentation>
		</annotation>
	</element>
	<element name="interior" type="gml:AbstractRingPropertyType">
		<annotation>
			<documentation>A boundary of a surface consists of a number of rings. The "interior" rings seperate the surface / surface patch from the area enclosed by the rings.</documentation>
		</annotation>
	</element>
	<element name="outerBoundaryIs" type="gml:AbstractRingPropertyType" substitutionGroup="gml:exterior">
		<annotation>
			<documentation>Deprecated with GML 3.0, included only for backwards compatibility with GML 2. Use "exterior" instead.</documentation>
		</annotation>
	</element>
	<element name="innerBoundaryIs" type="gml:AbstractRingPropertyType" substitutionGroup="gml:interior">
		<annotation>
			<documentation>Deprecated with GML 3.0, included only for backwards compatibility with GML 2. Use "interior" instead.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="AbstractRingPropertyType">
		<annotation>
			<documentation>Encapsulates a ring to represent the surface boundary property of a surface.</documentation>
		</annotation>
		<sequence>
			<element ref="gml:_Ring"/>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<element name="LinearRing" type="gml:LinearRingType" substitutionGroup="gml:_Ring"/>
	<!-- =========================================================== -->
	<complexType name="LinearRingType">
		<annotation>
			<documentation>A LinearRing is defined by four or more coordinate tuples, with linear interpolation between them; the first and last coordinates must be coincident.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractRingType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the control points of a linear ring.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this ring, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this ring (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this ring only. The number of direct positions in the list must be at least four.</documentation>
						</annotation>
						<choice minOccurs="4" maxOccurs="unbounded">
							<element ref="gml:pos"/>
							<element ref="gml:pointProperty"/>
							<element ref="gml:pointRep">
								<annotation>
									<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</documentation>
								</annotation>
							</element>
						</choice>
						<element ref="gml:posList"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</documentation>
							</annotation>
						</element>
						<element ref="gml:coord" minOccurs="4" maxOccurs="unbounded">
							<annotation>
								<documentation>Deprecated with GML version 3.0 and included for backwards compatibility with GML 2. Use "pos" elements instead.</documentation>
							</annotation>
						</element>
					</choice>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="LinearRingPropertyType">
		<annotation>
			<documentation>Encapsulates a ring to represent properties in features or geometry collections.</documentation>
		</annotation>
		<choice>
			<element ref="gml:LinearRing"/>
		</choice>
	</complexType>
	<!-- =========================================================== -->
	<!-- 
	
	The following types and elements are deprecated and should not be used !
	
	-->
	<!-- =========================================================== -->
	<element name="polygonProperty" type="gml:PolygonPropertyType">
		<annotation>
			<documentation>Deprecated with GML 3.0 and included only for backwards compatibility with GML 2.0. Use "surfaceProperty" instead.
This property element either references a polygon via the XLink-attributes or contains the polygon element.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="PolygonPropertyType">
		<annotation>
			<documentation>This type is deprecated with GML 3 and shall not be used. It is included for backwards compatibility with GML 2. Use SurfacePropertyType instead.
A property that has a polygon as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
		</annotation>
		<sequence minOccurs="0">
			<element ref="gml:Polygon"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup">
			<annotation>
				<documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
			</annotation>
		</attributeGroup>
	</complexType>
	<!-- =========================================================== -->
	<element name="Curve" type="gml:CurveType" substitutionGroup="gml:_Curve"/>
	<!-- =========================================================== -->
	<complexType name="CurveType">
		<annotation>
			<documentation>Curve is a 1-dimensional primitive. Curves are continuous, connected, and have a measurable length in terms of the coordinate system. 
				A curve is composed of one or more curve segments. Each curve segment within a curve may be defined using a different interpolation method. The curve segments are connected to one another, with the end point of each segment except the last being the start point of the next segment in the segment list.
				The orientation of the curve is positive.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveType">
				<sequence>
					<element ref="gml:segments">
						<annotation>
							<documentation>This element encapsulates the segments of the curve.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="baseCurve" type="gml:CurvePropertyType">
		<annotation>
			<appinfo>
				<sch:pattern name="Check either href or content not both">
					<sch:rule context="gml:baseCurve">
						<sch:extends rule="hrefOrContent"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
			<documentation>This property element either references a curve via the XLink-attributes or contains the curve element. A curve element is any element which is substitutable for "_Curve".</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<element name="OrientableCurve" type="gml:OrientableCurveType" substitutionGroup="gml:_Curve"/>
	<!-- =========================================================== -->
	<complexType name="OrientableCurveType">
		<annotation>
			<documentation>OrientableCurve consists of a curve and an orientation. If the orientation is "+", then the OrientableCurve is identical to the baseCurve. If the orientation is "-", then the OrientableCurve is related to another _Curve with a parameterization that reverses the sense of the curve traversal.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveType">
				<sequence>
					<element ref="gml:baseCurve">
						<annotation>
							<documentation>References or contains the base curve (positive orientation).
NOTE: This definition allows for a nested structure, i.e. an OrientableCurve may use another OrientableCurve as its base curve.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="orientation" type="gml:SignType" default="+">
					<annotation>
						<documentation>If the orientation is "+", then the OrientableCurve is identical to the baseCurve. If the orientation is "-", then the OrientableCurve is related to another _Curve with a parameterization that reverses the sense of the curve traversal. "+" is the default value.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<!-- curve segments (1-dimensional) -->
	<!-- =========================================================== -->
	<!-- =========================================================== -->
	<element name="_CurveSegment" type="gml:AbstractCurveSegmentType" abstract="true">
		<annotation>
			<documentation>The "_CurveSegment" element is the abstract head of the substituition group for all curve segment elements, i.e. continuous segments of the same interpolation mechanism.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="AbstractCurveSegmentType" abstract="true">
		<annotation>
			<documentation>Curve segment defines a homogeneous segment of a curve.</documentation>
		</annotation>
		<sequence/>
		<attribute name="numDerivativesAtStart" type="integer" use="optional" default="0">
			<annotation>
				<documentation>The attribute "numDerivativesAtStart" specifies the type of continuity between this curve segment and its predecessor. If this is the first curve segment in the curve, one of these values, as appropriate, is ignored. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.</documentation>
			</annotation>
		</attribute>
		<attribute name="numDerivativesAtEnd" type="integer" use="optional" default="0">
			<annotation>
				<documentation>The attribute "numDerivativesAtEnd" specifies the type of continuity between this curve segment and its successor. If this is the last curve segment in the curve, one of these values, as appropriate, is ignored. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.</documentation>
			</annotation>
		</attribute>
		<attribute name="numDerivativeInterior" type="integer" use="optional" default="0">
			<annotation>
				<documentation>The attribute "numDerivativesInterior" specifies the type of continuity that is guaranteed interior to the curve. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<!-- =========================================================== -->
	<element name="segments" type="gml:CurveSegmentArrayPropertyType">
		<annotation>
			<documentation>This property element contains a list of curve segments. The order of the elements is significant and shall be preserved when processing the array.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="CurveSegmentArrayPropertyType">
		<annotation>
			<documentation>A container for an array of curve segments.</documentation>
		</annotation>
		<sequence>
			<element ref="gml:_CurveSegment" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!-- =========== global element in "_CurveSegment" substitution group ================ -->
	<element name="LineStringSegment" type="gml:LineStringSegmentType" substitutionGroup="gml:_CurveSegment"/>
	<!-- =========================================================== -->
	<complexType name="LineStringSegmentType">
		<annotation>
			<documentation>A LineStringSegment is a curve segment that is defined by two or more coordinate tuples, with linear interpolation between them.
				Note: LineStringSegment implements GM_LineString of ISO 19107.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveSegmentType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be at least two.</documentation>
						</annotation>
						<choice minOccurs="2" maxOccurs="unbounded">
							<element ref="gml:pos"/>
							<element ref="gml:pointProperty"/>
							<element ref="gml:pointRep">
								<annotation>
									<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</documentation>
								</annotation>
							</element>
						</choice>
						<element ref="gml:posList"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</documentation>
							</annotation>
						</element>
					</choice>
				</sequence>
				<attribute name="interpolation" type="gml:CurveInterpolationType" fixed="linear">
					<annotation>
						<documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For a LineStringSegment the interpolation is fixed as "linear".</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========== global element in "_CurveSegment" substitution group ================ -->
	<element name="ArcString" type="gml:ArcStringType" substitutionGroup="gml:_CurveSegment"/>
	<!-- =========================================================== -->
	<complexType name="ArcStringType">
		<annotation>
			<documentation>An ArcString is a curve segment that uses three-point circular arc interpolation.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveSegmentType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be at least three.</documentation>
						</annotation>
						<choice minOccurs="3" maxOccurs="unbounded">
							<element ref="gml:pos"/>
							<element ref="gml:pointProperty"/>
							<element ref="gml:pointRep">
								<annotation>
									<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</documentation>
								</annotation>
							</element>
						</choice>
						<element ref="gml:posList"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</documentation>
							</annotation>
						</element>
					</choice>
				</sequence>
				<attribute name="interpolation" type="gml:CurveInterpolationType" fixed="circularArc3Points">
					<annotation>
						<documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For an ArcString the interpolation is fixed as "circularArc3Points".</documentation>
					</annotation>
				</attribute>
				<attribute name="numArc" type="integer" use="optional">
					<annotation>
						<documentation>The number of arcs in the arc string can be explicitly stated in this attribute. The number of control points in the arc string must be 2 * numArc + 1.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========== global element in "_CurveSegment" substitution group ================ -->
	<element name="Arc" type="gml:ArcType" substitutionGroup="gml:ArcString"/>
	<!-- =========================================================== -->
	<complexType name="ArcType">
		<annotation>
			<documentation>An Arc is an arc string with only one arc unit, i.e. three control points.</documentation>
		</annotation>
		<complexContent>
			<restriction base="gml:ArcStringType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be three.</documentation>
						</annotation>
						<choice minOccurs="3" maxOccurs="3">
							<element ref="gml:pos"/>
							<element ref="gml:pointProperty"/>
							<element ref="gml:pointRep">
								<annotation>
									<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</documentation>
								</annotation>
							</element>
						</choice>
						<element ref="gml:posList"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</documentation>
							</annotation>
						</element>
					</choice>
				</sequence>
				<attribute name="numArc" type="integer" use="optional" fixed="1">
					<annotation>
						<documentation>An arc is an arc string consiting of a single arc, the attribute is fixed to "1".</documentation>
					</annotation>
				</attribute>
			</restriction>
		</complexContent>
	</complexType>
	<!-- =========== global element in "_CurveSegment" substitution group ================ -->
	<element name="Circle" type="gml:CircleType" substitutionGroup="gml:Arc"/>
	<!-- =========================================================== -->
	<complexType name="CircleType">
		<annotation>
			<documentation>A Circle is an arc whose ends coincide to form a simple closed loop. The "start" and "end" bearing are equal and shall be the bearing for the first controlPoint listed. The three control points must be distinct non-co-linear points for the Circle to be unambiguously defined. The arc is simply extended past the third control point until the first control point is encountered.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:ArcType"/>
		</complexContent>
	</complexType>
	<!-- =========== global element in "_CurveSegment" substitution group ================ -->
	<element name="ArcStringByBulge" type="gml:ArcStringByBulgeType" substitutionGroup="gml:_CurveSegment"/>
	<!-- =========================================================== -->
	<complexType name="ArcStringByBulgeType">
		<annotation>
			<documentation>This variant of the arc computes the mid points of the arcs instead of storing the coordinates directly. The control point sequence consists of the start and end points of each arc plus the bulge.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveSegmentType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be at least two.</documentation>
						</annotation>
						<choice minOccurs="2" maxOccurs="unbounded">
							<element ref="gml:pos"/>
							<element ref="gml:pointProperty"/>
							<element ref="gml:pointRep">
								<annotation>
									<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</documentation>
								</annotation>
							</element>
						</choice>
						<element ref="gml:posList"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</documentation>
							</annotation>
						</element>
					</choice>
					<element name="bulge" type="double" maxOccurs="unbounded">
						<annotation>
							<documentation>The bulge controls the offset of each arc's midpoint. The "bulge" is the real number multiplier for the normal that determines the offset direction of the midpoint of each arc. The length of the bulge sequence is exactly 1 less than the length of the control point array, since a bulge is needed for each pair of adjacent points in the control point array. The bulge is not given by a distance, since it is simply a multiplier for the normal.
The midpoint of the resulting arc is given by: midPoint = ((startPoint + endPoint)/2.0) + bulge*normal</documentation>
						</annotation>
					</element>
					<element name="normal" type="gml:VectorType" maxOccurs="unbounded">
						<annotation>
							<documentation>The attribute "normal" is a vector normal (perpendicular) to the chord of the arc, the line joining the first and last
point of the arc. In a 2D coordinate system, there are only two possible directions for the normal, and it is often given as a signed real, indicating its length, with a positive sign indicating a left turn angle from the chord line, and a negative sign indicating a right turn from the chord. In 3D, the normal determines the plane of the arc, along with the start and endPoint of the arc.
The normal is usually a unit vector, but this is not absolutely necessary. If the normal is a zero vector, the geometric object becomes equivalent to the straight line between the two end points. The length of the normal sequence is exactly the same as for the bulge sequence, 1 less than the control point sequence length.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="interpolation" type="gml:CurveInterpolationType" fixed="circularArc2PointWithBulge">
					<annotation>
						<documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For an ArcStringByBulge the interpolation is fixed as "circularArc2PointWithBulge".</documentation>
					</annotation>
				</attribute>
				<attribute name="numArc" type="integer" use="optional">
					<annotation>
						<documentation>The number of arcs in the arc string can be explicitly stated in this attribute. The number of control points in the arc string must be numArc + 1.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========== global element in "_CurveSegment" substitution group ================ -->
	<element name="ArcByBulge" type="gml:ArcByBulgeType" substitutionGroup="gml:ArcStringByBulge"/>
	<!-- =========================================================== -->
	<complexType name="ArcByBulgeType">
		<annotation>
			<documentation>An ArcByBulge is an arc string with only one arc unit, i.e. two control points and one bulge.</documentation>
		</annotation>
		<complexContent>
			<restriction base="gml:ArcStringByBulgeType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be two.</documentation>
						</annotation>
						<choice minOccurs="2" maxOccurs="2">
							<element ref="gml:pos"/>
							<element ref="gml:pointProperty"/>
							<element ref="gml:pointRep">
								<annotation>
									<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</documentation>
								</annotation>
							</element>
						</choice>
						<element ref="gml:posList"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</documentation>
							</annotation>
						</element>
					</choice>
					<element name="bulge" type="double">
						<annotation>
							<documentation>The bulge controls the offset of each arc's midpoint. The "bulge" is the real number multiplier for the normal that determines the offset direction of the midpoint of each arc. The length of the bulge sequence is exactly 1 less than the length of the control point array, since a bulge is needed for each pair of adjacent points in the control point array. The bulge is not given by a distance, since it is simply a multiplier for the normal.
The midpoint of the resulting arc is given by: midPoint = ((startPoint + endPoint)/2.0) + bulge*normal</documentation>
						</annotation>
					</element>
					<element name="normal" type="gml:VectorType">
						<annotation>
							<documentation>The attribute "normal" is a vector normal (perpendicular) to the chord of the arc, the line joining the first and last
point of the arc. In a 2D coordinate system, there are only two possible directions for the normal, and it is often given as a signed real, indicating its length, with a positive sign indicating a left turn angle from the chord line, and a negative sign indicating a right turn from the chord. In 3D, the normal determines the plane of the arc, along with the start and endPoint of the arc.
The normal is usually a unit vector, but this is not absolutely necessary. If the normal is a zero vector, the geometric object becomes equivalent to the straight line between the two end points. The length of the normal sequence is exactly the same as for the bulge sequence, 1 less than the control point sequence length.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="numArc" type="integer" use="optional" fixed="1">
					<annotation>
						<documentation>An arc is an arc string consiting of a single arc, the attribute is fixed to "1".</documentation>
					</annotation>
				</attribute>
			</restriction>
		</complexContent>
	</complexType>
	<!-- =========== global element in "_CurveSegment" substitution group ================ -->
	<element name="ArcByCenterPoint" type="gml:ArcByCenterPointType" substitutionGroup="gml:_CurveSegment"/>
	<!-- =========================================================== -->
	<complexType name="ArcByCenterPointType">
		<annotation>
			<documentation>This variant of the arc requires that the points on the arc have to be computed instead of storing the coordinates directly. The control point is the center point of the arc plus the radius and the bearing at start and end. This represenation can be used only in 2D.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveSegmentType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the control points of a curve segment.
1. A "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) element. The "pos" element contains a center point that is only part of this curve segment, a "pointProperty" element contains a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element can be used to specifiy the coordinates of the center point, too. The number of direct positions in the list must be one.</documentation>
						</annotation>
						<choice>
							<element ref="gml:pos"/>
							<element ref="gml:pointProperty"/>
							<element ref="gml:pointRep">
								<annotation>
									<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</documentation>
								</annotation>
							</element>
						</choice>
						<element ref="gml:posList"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</documentation>
							</annotation>
						</element>
					</choice>
					<element name="radius" type="gml:LengthType">
						<annotation>
							<documentation>The radius of the arc.</documentation>
						</annotation>
					</element>
					<element name="startAngle" type="gml:AngleType" minOccurs="0">
						<annotation>
							<documentation>The bearing of the arc at the start.</documentation>
						</annotation>
					</element>
					<element name="endAngle" type="gml:AngleType" minOccurs="0">
						<annotation>
							<documentation>The bearing of the arc at the end.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="interpolation" type="gml:CurveInterpolationType" fixed="circularArcCenterPointWithRadius">
					<annotation>
						<documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For an ArcByCenterPoint the interpolation is fixed as "circularArcCenterPointWithRadius".</documentation>
					</annotation>
				</attribute>
				<attribute name="numArc" type="integer" use="required" fixed="1">
					<annotation>
						<documentation>Since this type describes always a single arc, the attribute is fixed to "1".</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========== global element in "_CurveSegment" substitution group ================ -->
	<element name="CircleByCenterPoint" type="gml:CircleByCenterPointType" substitutionGroup="gml:ArcByCenterPoint"/>
	<!-- =========================================================== -->
	<complexType name="CircleByCenterPointType">
		<annotation>
			<documentation>A CircleByCenterPoint is an ArcByCenterPoint with identical start and end angle to form a full circle. Again, this represenation can be used only in 2D.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:ArcByCenterPointType"/>
		</complexContent>
	</complexType>
	<!-- ================================================================================ -->
	<element name="OffsetCurve" type="gml:OffsetCurveType" substitutionGroup="gml:_CurveSegment"/>
	<!-- ================================================================================ -->
	<complexType name="OffsetCurveType">
		<annotation>
			<documentation>An offset curve is a curve at a constant
		 distance from the basis curve. They can be useful as a cheap
		 and simple alternative to constructing curves that are offsets	
		 by definition.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveSegmentType">
				<sequence>
					<element name="offsetBase" type="gml:CurvePropertyType">
						<annotation>
							<documentation>offsetBase is a reference to thecurve from which this
							 curve is define	as an offset.</documentation>
						</annotation>
					</element>
					<element name="distance" type="gml:LengthType">
						<annotation>
							<documentation>distance is the distance at which the
							 offset curve is generated from the basis curve. In 2D systems, positive distances
							 are to be to the left of the basis curve, and the negative distances are to be to the 
							 right of the basis curve.</documentation>
						</annotation>
					</element>
					<element name="refDirection" type="gml:VectorType" minOccurs="0">
						<annotation>
							<documentation>refDistance is used to define the vector
       direction of the offset curve from the basis curve. It can
       be omitted in the 2D case, where the distance can be 
       positive or negative. In that case, distance defines left
       side (positive distance) or right side (negative distance)
       with respect to the tangent to the basis curve.

       In 3D the basis curve shall have a well defined tangent 
       direction for every point. The offset curve at any point 
       in 3D, the basis curve shall have a well-defined tangent
       direction for every point. The offset curve at any point
       (parameter) on the basis curve c is in the direction
       -   -   -         -               
       s = v x t  where  v = c.refDirection()  
       and
       -
       t = c.tangent()
                                                    -
       For the offset direction to be well-defined, v shall not
       on any point of the curve be in the same, or opposite, 
       direction as
       - 
       t.

       The default value of the refDirection shall be the local
       co-ordinate axis vector for elevation, which indicates up for
       the curve in a geographic sense.

       NOTE! If the refDirection is the positive tangent to the
       local elevation axis ("points upward"), then the offset
       vector points to the left of the curve when viewed from
       above.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- ====================================================== -->
	<element name="AffinePlacement" type="gml:AffinePlacementType"/>
	<!-- ====================================================== -->
	<complexType name="AffinePlacementType">
		<annotation>
			<documentation>A placement takes a standard geometric
   construction and places it in geographic space. It defines a
   transformation from a constructive parameter space to the 
   co-ordinate space of the co-ordinate reference system being used.  
   Parameter spaces in formulae in this International Standard are 
   given as (u, v) in 2D and(u, v, w) in 3D. Co-ordinate reference 
   systems positions are given in formulae, in this International 
   Standard, by either (x, y) in 2D, or (x, y, z) in 3D.

   Affine placements are defined by linear transformations from 
   parameter space to the target co-ordiante space. 2-dimensional 
   Cartesian parameter space,(u,v) transforms into 3-dimensional co-
   ordinate reference systems,(x,y,z) by using an affine 
   transformation,(u,v)->(x,y,z) which is defined :

	x	ux vx  	x0
			 u	  
	y =	uy vy   + y0
			 v		
	x	uz vz	z0
	
   Then, given this equation, the location element of the 
   AffinePlacement is the direct position (x0, y0, z0), which is the
   target position of the origin in (u, v). The two reference
   directions (ux, uy, uz) and (vx, vy, vz) are the target     
   directions of the unit vectors at the origin in (u, v).</documentation>
		</annotation>
		<sequence>
			<element name="location" type="gml:DirectPositionType">
				<annotation>
					<documentation>The location property gives 
     the target of the parameter space origin. This is the vector  
    (x0, y0, z0) in the formulae above.</documentation>
				</annotation>
			</element>
			<element name="refDirection" type="gml:VectorType" maxOccurs="unbounded">
				<annotation>
					<documentation>The attribute refDirection gives the    
target directions for the co-ordinate basis vectors of the  
parameter space. These are the columns of the matrix in the 
formulae given above. The number of directions given shall be 
inDimension. The dimension of the directions shall be 
outDimension.</documentation>
				</annotation>
			</element>
			<element name="inDimension" type="positiveInteger">
				<annotation>
					<documentation>Dimension of the constructive parameter 
     space.</documentation>
				</annotation>
			</element>
			<element name="outDimension" type="positiveInteger">
				<annotation>
					<documentation>Dimension of the co-ordinate space.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<!-- = global element in "_CurveSegment" substitution group ========================== -->
	<element name="Clothoid" type="gml:ClothoidType" substitutionGroup="gml:_CurveSegment"/>
	<!-- ======================================================================= -->
	<complexType name="ClothoidType">
		<annotation>
			<documentation>A clothoid, or Cornu's spiral, is plane
   curve whose curvature is a fixed function of its length.
   In suitably chosen co-ordinates it is given by Fresnel's
   integrals.

    x(t) = 0-integral-t cos(AT*T/2)dT    
    
    y(t) = 0-integral-t sin(AT*T/2)dT
   
   This geometry is mainly used as a transition curve between
   curves of type straight line to circular arc or circular arc
   to circular arc. With this curve type it is possible to 
   achieve a C2-continous transition between the above mentioned
   curve types. One formula for the Clothoid is A*A = R*t where
   A is constant, R is the varying radius of curvature along the
   the curve and t is the length along and given in the Fresnel 
   integrals.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveSegmentType">
				<sequence>
					<element name="refLocation">
						<complexType>
							<sequence>
								<element ref="gml:AffinePlacement">
									<annotation>
										<documentation>The "refLocation" is an affine mapping 
          that places  the curve defined by the Fresnel Integrals  
          into the co-ordinate reference system of this object.</documentation>
									</annotation>
								</element>
							</sequence>
						</complexType>
					</element>
					<element name="scaleFactor" type="decimal">
						<annotation>
							<documentation>The element gives the value for the
       constant in the Fresnel's integrals.</documentation>
						</annotation>
					</element>
					<element name="startParameter" type="double">
						<annotation>
							<documentation>The startParameter is the arc length
       distance from the inflection point that will be the start
       point for this curve segment. This shall be lower limit
       used in the Fresnel integral and is the value of the
       constructive parameter of this curve segment at its start
       point. The startParameter can either be positive or
       negative. 
       NOTE! If 0.0 (zero), lies between the startParameter and
       the endParameter of the clothoid, then the curve goes
       through the clothoid's inflection point, and the direction
       of its radius of curvature, given by the second
       derivative vector, changes sides with respect to the
       tangent vector. The term length distance for the</documentation>
						</annotation>
					</element>
					<element name="endParameter" type="double">
						<annotation>
							<documentation>The endParameter is the arc length
       distance from the inflection point that will be the end
       point for this curve segment. This shall be upper limit
       used in the Fresnel integral and is the value of the
       constructive parameter of this curve segment at its
       start point. The startParameter can either be positive
       or negative.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- = global element in "_CurveSegment" substitution group = -->
	<element name="GeodesicString" type="gml:GeodesicStringType" substitutionGroup="gml:_CurveSegment"/>
	<!-- ======================================================== -->
	<complexType name="GeodesicStringType">
		<annotation>
			<documentation>A GeodesicString consists of sequence of
   geodesic segments. The type essentially combines a sequence of
   Geodesic into a single object.
   The GeodesicString is computed from two or more positions and an
   interpolation using geodesics defined from the geoid (or 
   ellipsoid) of the co-ordinate reference system being used.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveSegmentType">
				<choice>
					<element ref="gml:posList"/>
					<group ref="gml:geometricPositionGroup" minOccurs="2" maxOccurs="unbounded"/>
				</choice>
				<attribute name="interpolation" type="gml:CurveInterpolationType" fixed="geodesic">
					<annotation>
						<documentation>The attribute "interpolation" specifies the
     curve interpolation mechanism used for this segment. This
     mechanism uses the control points and control parameters to
     determine the position of this curve segment. For an 
     GeodesicString the interpolation is fixed as "geodesic".</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- = global element in "_CurveSegment" substitution group = -->
	<element name="Geodesic" type="gml:GeodesicType" substitutionGroup="gml:GeodesicString"/>
	<!-- ======================================================== -->
	<complexType name="GeodesicType">
		<annotation>
			<documentation>A Geodesic consists of two distinct
   positions joined by a geodesic curve. The control points of
   a Geodesic shall lie on the geodesic between its start
   point and end points. Between these two points, a geodesic
   curve defined from ellipsoid or geoid model used by the
   co-ordinate reference systems may be used to interpolate
   other positions. Any other point in the controlPoint array
   must fall on this geodesic.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:GeodesicStringType"/>
		</complexContent>
	</complexType>
	<!-- =========== global element in "_CurveSegment" substitution group ================ -->
	<element name="CubicSpline" type="gml:CubicSplineType" substitutionGroup="gml:_CurveSegment"/>
	<!-- =========================================================== -->
	<complexType name="CubicSplineType">
		<annotation>
			<documentation>Cubic splines are similar to line strings in that they are a sequence of segments each with its own defining function. A cubic spline uses the control points and a set of derivative parameters to define a piecewise 3rd degree polynomial interpolation. Unlike line-strings, the parameterization by arc length is not necessarily still a polynomial. 
				The function describing the curve must be C2, that is, have a continuous 1st and 2nd derivative at all points, and pass through the controlPoints in the order given. Between the control points, the curve segment is defined by a cubic polynomial. At each control point, the polynomial changes in such a manner that the 1st and 2nd derivative vectors are the same from either side. The control parameters record must contain vectorAtStart, and vectorAtEnd which are the unit tangent vectors at controlPoint[1] and controlPoint[n] where n = controlPoint.count. 
				Note: only the direction of the vectors is relevant, not their length.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveSegmentType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be at least three.</documentation>
						</annotation>
						<choice minOccurs="2" maxOccurs="unbounded">
							<element ref="gml:pos"/>
							<element ref="gml:pointProperty"/>
							<element ref="gml:pointRep">
								<annotation>
									<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</documentation>
								</annotation>
							</element>
						</choice>
						<element ref="gml:posList"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</documentation>
							</annotation>
						</element>
					</choice>
					<element name="vectorAtStart" type="gml:VectorType">
						<annotation>
							<documentation>"vectorAtStart" is the unit tangent vector at the start point of the spline.</documentation>
						</annotation>
					</element>
					<element name="vectorAtEnd" type="gml:VectorType">
						<annotation>
							<documentation>"vectorAtEnd" is the unit tangent vector at the end point of the spline.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="interpolation" type="gml:CurveInterpolationType" fixed="cubicSpline">
					<annotation>
						<documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For a CubicSpline the interpolation is fixed as "cubicSpline".</documentation>
					</annotation>
				</attribute>
				<attribute name="degree" type="integer" fixed="3">
					<annotation>
						<documentation>The degree for a cubic spline is "3".</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="KnotType">
		<annotation>
			<documentation>A knot is a breakpoint on a piecewise spline curve.</documentation>
		</annotation>
		<sequence>
			<element name="value" type="double">
				<annotation>
					<documentation>The property "value" is the value of the parameter at the knot of the spline. The sequence of knots shall be a non-decreasing sequence. That is, each knot's value in the sequence shall be equal to or greater than the previous knot's value. The use of equal consecutive knots is normally handled using the multiplicity.</documentation>
				</annotation>
			</element>
			<element name="multiplicity" type="nonNegativeInteger">
				<annotation>
					<documentation>The property "multiplicity" is the multiplicity of this knot used in the definition of the spline (with the same weight).</documentation>
				</annotation>
			</element>
			<element name="weight" type="double">
				<annotation>
					<documentation>The property "weight" is the value of the averaging weight used for this knot of the spline.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="KnotPropertyType">
		<annotation>
			<documentation>Encapsulates a knot to use it in a geometric type.</documentation>
		</annotation>
		<sequence>
			<element name="Knot" type="gml:KnotType"/>
		</sequence>
	</complexType>
	<!-- =========== global element in "_CurveSegment" substitution group ================ -->
	<element name="BSpline" type="gml:BSplineType" substitutionGroup="gml:_CurveSegment"/>
	<!-- =========================================================== -->
	<complexType name="BSplineType">
		<annotation>
			<documentation>A B-Spline is a piecewise parametric polynomial or rational curve described in terms of control points and basis functions. Knots are breakpoints on the curve that connect its pieces. They are given as a non-decreasing sequence of real numbers. If the weights in the knots are equal then it is a polynomial spline. The degree is the algebraic degree of the basis functions.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractCurveSegmentType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only.</documentation>
						</annotation>
						<choice minOccurs="0" maxOccurs="unbounded">
							<element ref="gml:pos"/>
							<element ref="gml:pointProperty"/>
							<element ref="gml:pointRep">
								<annotation>
									<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</documentation>
								</annotation>
							</element>
						</choice>
						<element ref="gml:posList"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</documentation>
							</annotation>
						</element>
					</choice>
					<element name="degree" type="nonNegativeInteger">
						<annotation>
							<documentation>The attribute "degree" shall be the degree of the polynomial used for interpolation in this spline.</documentation>
						</annotation>
					</element>
					<element name="knot" type="gml:KnotPropertyType" minOccurs="2" maxOccurs="unbounded">
						<annotation>
							<documentation>The property "knot" shall be the sequence of distinct knots used to define the spline basis functions.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="interpolation" type="gml:CurveInterpolationType" default="polynomialSpline">
					<annotation>
						<documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For a BSpline the interpolation can be either "polynomialSpline" or "rationalSpline", default is "polynomialSpline".</documentation>
					</annotation>
				</attribute>
				<attribute name="isPolynomial" type="boolean" use="optional">
					<annotation>
						<documentation>The attribute isPolynomial is set to true if this is a polynomial spline.</documentation>
					</annotation>
				</attribute>
				<attribute name="knotType" type="gml:KnotTypesType" use="optional">
					<annotation>
						<documentation>The attribute "knotType" gives the type of knot distribution used in defining this spline. This is for information only
and is set according to the different construction-functions.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========== global element in "_CurveSegment" substitution group ================ -->
	<element name="Bezier" type="gml:BezierType" substitutionGroup="gml:BSpline"/>
	<!-- =========================================================== -->
	<complexType name="BezierType">
		<annotation>
			<documentation>Bezier curves are polynomial splines that use Bezier or Bernstein polynomials for interpolation purposes. It is a special case of the B-Spline curve with two knots.</documentation>
		</annotation>
		<complexContent>
			<restriction base="gml:BSplineType">
				<sequence>
					<choice>
						<annotation>
							<documentation>GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only.</documentation>
						</annotation>
						<choice minOccurs="0" maxOccurs="unbounded">
							<element ref="gml:pos"/>
							<element ref="gml:pointProperty"/>
							<element ref="gml:pointRep">
								<annotation>
									<documentation>Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.</documentation>
								</annotation>
							</element>
						</choice>
						<element ref="gml:posList"/>
						<element ref="gml:coordinates">
							<annotation>
								<documentation>Deprecated with GML version 3.1.0. Use "posList" instead.</documentation>
							</annotation>
						</element>
					</choice>
					<element name="degree" type="nonNegativeInteger">
						<annotation>
							<documentation>The attribute "degree" shall be the degree of the polynomial used for interpolation in this spline.</documentation>
						</annotation>
					</element>
					<element name="knot" type="gml:KnotPropertyType" minOccurs="2" maxOccurs="2">
						<annotation>
							<documentation>The property "knot" shall be the sequence of distinct knots used to define the spline basis functions.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="interpolation" type="gml:CurveInterpolationType" fixed="polynomialSpline">
					<annotation>
						<documentation>The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For a Bezier the interpolation is fixed as "polynomialSpline".</documentation>
					</annotation>
				</attribute>
				<attribute name="isPolynomial" type="boolean" fixed="true">
					<annotation>
						<documentation>The attribute isPolynomial is set to true as this is a polynomial spline.</documentation>
					</annotation>
				</attribute>
				<attribute name="knotType" type="gml:KnotTypesType" use="prohibited">
					<annotation>
						<documentation>The property "knotType" is not relevant for Bezier curve segments.</documentation>
					</annotation>
				</attribute>
			</restriction>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="Surface" type="gml:SurfaceType" substitutionGroup="gml:_Surface"/>
	<!-- =========================================================== -->
	<complexType name="SurfaceType">
		<annotation>
			<documentation>A Surface is a 2-dimensional primitive and is composed of one or more surface patches. The surface patches are connected to one another.
				The orientation of the surface is positive ("up"). The orientation of a surface chooses an "up" direction through the choice of the upward normal, which, if the surface is not a cycle, is the side of the surface from which the exterior boundary appears counterclockwise. Reversal of the surface orientation reverses the curve orientation of each boundary component, and interchanges the conceptual "up" and "down" direction of the surface. If the surface is the boundary of a solid, the "up" direction is usually outward. For closed surfaces, which have no boundary, the up direction is that of the surface patches, which must be consistent with one another. Its included surface patches describe the interior structure of the Surface.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractSurfaceType">
				<sequence>
					<element ref="gml:patches">
						<annotation>
							<documentation>This element encapsulates the patches of the surface.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="baseSurface" type="gml:SurfacePropertyType">
		<annotation>
			<appinfo>
				<sch:pattern name="Check either href or content not both">
					<sch:rule context="gml:baseSurface">
						<sch:extends rule="hrefOrContent"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
			<documentation>This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element which is substitutable for "_Surface".</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<element name="OrientableSurface" type="gml:OrientableSurfaceType" substitutionGroup="gml:_Surface"/>
	<!-- =========================================================== -->
	<complexType name="OrientableSurfaceType">
		<annotation>
			<documentation>OrientableSurface consists of a surface and an orientation. If the orientation is "+", then the OrientableSurface is identical to the baseSurface. If the orientation is "-", then the OrientableSurface is a reference to a Surface with an up-normal that reverses the direction for this OrientableSurface, the sense of "the top of the surface".</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractSurfaceType">
				<sequence>
					<element ref="gml:baseSurface">
						<annotation>
							<documentation>References or contains the base surface (positive orientation).</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="orientation" type="gml:SignType" default="+">
					<annotation>
						<documentation>If the orientation is "+", then the OrientableSurface is identical to the baseSurface. If the orientation is "-", then the OrientableSurface is a reference to a Surface with an up-normal that reverses the direction for this OrientableSurface, the sense of "the top of the surface". "+" is the default value.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<!-- surface patches (2-dimensional) -->
	<!-- =========================================================== -->
	<!-- =========================================================== -->
	<element name="_SurfacePatch" type="gml:AbstractSurfacePatchType" abstract="true">
		<annotation>
			<documentation>The "_SurfacePatch" element is the abstract head of the substituition group for all surface pach elements describing a continuous portion of a surface.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="AbstractSurfacePatchType" abstract="true">
		<annotation>
			<documentation>A surface patch defines a homogenuous portion of a surface.</documentation>
		</annotation>
		<sequence/>
	</complexType>
	<!-- =========================================================== -->
	<element name="patches" type="gml:SurfacePatchArrayPropertyType">
		<annotation>
			<documentation>This property element contains a list of surface patches. The order of the elements is significant and shall be preserved when processing the array.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="SurfacePatchArrayPropertyType">
		<annotation>
			<documentation>A container for an array of surface patches.</documentation>
		</annotation>
		<sequence minOccurs="0" maxOccurs="unbounded">
			<element ref="gml:_SurfacePatch"/>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<element name="PolygonPatch" type="gml:PolygonPatchType" substitutionGroup="gml:_SurfacePatch"/>
	<!-- =========================================================== -->
	<complexType name="PolygonPatchType">
		<annotation>
			<documentation>A PolygonPatch is a surface patch that is defined by a set of boundary curves and an underlying surface to which these curves adhere. The curves are coplanar and the polygon uses planar interpolation in its interior. Implements GM_Polygon of ISO 19107.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractSurfacePatchType">
				<sequence>
					<element ref="gml:exterior" minOccurs="0"/>
					<element ref="gml:interior" minOccurs="0" maxOccurs="unbounded"/>
				</sequence>
				<attribute name="interpolation" type="gml:SurfaceInterpolationType" fixed="planar">
					<annotation>
						<documentation>The attribute "interpolation" specifies the interpolation mechanism used for this surface patch. Currently only planar surface patches are defined in GML 3, the attribute is fixed to "planar", i.e. the interpolation method shall return points on a single plane. The boundary of the patch shall be contained within that plane.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="Triangle" type="gml:TriangleType" substitutionGroup="gml:_SurfacePatch"/>
	<!-- =========================================================== -->
	<complexType name="TriangleType">
		<annotation>
			<documentation>Represents a triangle as a surface with an outer boundary consisting of a linear ring. Note that this is a polygon (subtype) with no inner boundaries. The number of points in the linear ring must be four.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractSurfacePatchType">
				<sequence>
					<element ref="gml:exterior">
						<annotation>
							<documentation>Constraint: The Ring shall be a LinearRing and must form a triangle, the first and the last position must be co-incident.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="interpolation" type="gml:SurfaceInterpolationType" fixed="planar">
					<annotation>
						<documentation>The attribute "interpolation" specifies the interpolation mechanism used for this surface patch. Currently only planar surface patches are defined in GML 3, the attribute is fixed to "planar", i.e. the interpolation method shall return points on a single plane. The boundary of the patch shall be contained within that plane.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="Rectangle" type="gml:RectangleType" substitutionGroup="gml:_SurfacePatch"/>
	<!-- =========================================================== -->
	<complexType name="RectangleType">
		<annotation>
			<documentation>Represents a rectangle as a surface with an outer boundary consisting of a linear ring. Note that this is a polygon (subtype) with no inner boundaries. The number of points in the linear ring must be five.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractSurfacePatchType">
				<sequence>
					<element ref="gml:exterior">
						<annotation>
							<documentation>Constraint: The Ring shall be a LinearRing and must form a rectangle; the first and the last position must be co-incident.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="interpolation" type="gml:SurfaceInterpolationType" fixed="planar">
					<annotation>
						<documentation>The attribute "interpolation" specifies the interpolation mechanism used for this surface patch. Currently only planar surface patches are defined in GML 3, the attribute is fixed to "planar", i.e. the interpolation method shall return points on a single plane. The boundary of the patch shall be contained within that plane.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="curveMember" type="gml:CurvePropertyType">
		<annotation>
			<documentation>This property element either references a curve via the XLink-attributes or contains the curve element. A curve element is any element which is substitutable for "_Curve".</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<element name="Ring" type="gml:RingType" substitutionGroup="gml:_Ring"/>
	<!-- =========================================================== -->
	<complexType name="RingType">
		<annotation>
			<documentation>A Ring is used to represent a single connected component of a surface boundary. It consists of a sequence of curves connected in a cycle (an object whose boundary is empty).
A Ring is structurally similar to a composite curve in that the endPoint of each curve in the sequence is the startPoint of the next curve in the Sequence. Since the sequence is circular, there is no exception to this rule. Each ring, like all boundaries, is a cycle and each ring is simple.
NOTE: Even though each Ring is simple, the boundary need not be simple. The easiest case of this is where one of the interior rings of a surface is tangent to its exterior ring.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractRingType">
				<sequence>
					<element ref="gml:curveMember" maxOccurs="unbounded">
						<annotation>
							<documentation>This element references or contains one curve in the composite curve. The curves are contiguous, the collection of curves is ordered.
NOTE: This definition allows for a nested structure, i.e. a CompositeCurve may use, for example, another CompositeCurve as a curve member.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="RingPropertyType">
		<annotation>
			<documentation>Encapsulates a ring to represent properties in features or geometry collections.</documentation>
		</annotation>
		<sequence>
			<element ref="gml:Ring"/>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<group name="PointGrid">
		<annotation>
			<documentation>Reference points which are organised
   into sequences or grids(sequences of equal length sequences).</documentation>
		</annotation>
		<sequence>
			<element name="row" maxOccurs="unbounded">
				<complexType>
					<sequence>
						<group ref="gml:geometricPositionListGroup"/>
					</sequence>
				</complexType>
			</element>
		</sequence>
	</group>
	<!-- ====================================================== -->
	<element name="_ParametricCurveSurface" type="gml:AbstractParametricCurveSurfaceType" abstract="true" substitutionGroup="gml:_SurfacePatch"/>
	<!-- ====================================================== -->
	<complexType name="AbstractParametricCurveSurfaceType">
		<annotation>
			<documentation>
			</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractSurfacePatchType"/>
		</complexContent>
	</complexType>
	<!-- ======================================================== -->
	<element name="_GriddedSurface" type="gml:AbstractGriddedSurfaceType" abstract="true" substitutionGroup="gml:_ParametricCurveSurface"/>
	<!-- ======================================================== -->
	<complexType name="AbstractGriddedSurfaceType">
		<annotation>
			<documentation>A gridded surface is a parametric curve
   surface derived from a rectangular grid in the parameter
   space. The rows from this grid are control points for
   horizontal surface curves; the columns are control points
   for vertical surface curves. The working assumption is that
   for a pair of parametric co-ordinates (s, t) that the
   horizontal curves for each integer offset are calculated
   and evaluated at "s". The defines a sequence of control
   points:
   
   cn(s) : s  1 .....columns 

   From this sequence a vertical curve is calculated for "s",
   and evaluated at "t". In most cases, the order of
   calculation (horizontal-vertical vs. vertical-horizontal)
   does not make a difference. Where it does, the horizontal-   
   vertical order shall be the one used.

   Logically, any pair of curve interpolation types can lead
   to a subtype of GriddedSurface. The following clauses
   define some most commonly encountered surfaces that can
   be represented in this manner.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractParametricCurveSurfaceType">
				<sequence>
					<group ref="gml:PointGrid">
						<annotation>
							<documentation>This is the double indexed sequence
       of control points, given in row major form. 
       NOTE! There in no assumption made about the shape
       of the grid. 
       For example, the positions need not effect a "21/2D"
       surface, consecutive points may be equal in any or all
       of the ordinates. Further, the curves in either or both
       directions may close.</documentation>
						</annotation>
					</group>
					<element name="rows" type="integer" minOccurs="0">
						<annotation>
							<documentation>The attribute rows gives the number
         of rows in the parameter grid.</documentation>
						</annotation>
					</element>
					<element name="columns" type="integer" minOccurs="0">
						<annotation>
							<documentation>The attribute columns gives the number
        of columns in the parameter grid.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- ======================================================== -->
	<element name="Cone" type="gml:ConeType" substitutionGroup="gml:_GriddedSurface"/>
	<!-- ======================================================== -->
	<complexType name="ConeType">
		<annotation>
			<documentation>A cone is a gridded surface given as a
   family of conic sections whose control points vary linearly.
   NOTE! A 5-point ellipse with all defining positions identical
   is a point. Thus, a truncated elliptical cone can be given as a
   2x5 set of control points
   ((P1, P1, P1, P1, P1), (P2, P3, P4, P5, P6)). P1 is the apex 
   of the cone. P2, P3,P4, P5 and P6 are any five distinct points
   around the base ellipse of the cone. If the horizontal curves
   are circles as opposed to ellipses, the a circular cone can
   be constructed using ((P1, P1, P1),(P2, P3, P4)). The apex most     
   not coinside with the other plane.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGriddedSurfaceType">
				<attribute name="horizontalCurveType" type="gml:CurveInterpolationType" fixed="circularArc3Points"/>
				<attribute name="verticalCurveType" type="gml:CurveInterpolationType" fixed="linear"/>
			</extension>
		</complexContent>
	</complexType>
	<!-- ======================================================== -->
	<element name="Cylinder" type="gml:CylinderType" substitutionGroup="gml:_GriddedSurface"/>
	<!-- ======================================================== -->
	<complexType name="CylinderType">
		<annotation>
			<documentation>A cylinder is a gridded surface given as a
   family of circles whose positions vary along a set of parallel
   lines, keeping the cross sectional horizontal curves of a
   constant shape.
   NOTE! Given the same working assumptions as in the previous
   note, a Cylinder can be given by two circles, giving us the
   control points of the form ((P1, P2, P3),(P4, P5, P6)).</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGriddedSurfaceType">
				<attribute name="horizontalCurveType" type="gml:CurveInterpolationType" fixed="circularArc3Points"/>
				<attribute name="verticalCurveType" type="gml:CurveInterpolationType" fixed="linear"/>
			</extension>
		</complexContent>
	</complexType>
	<!-- ======================================================== -->
	<element name="Sphere" type="gml:SphereType" substitutionGroup="gml:_GriddedSurface"/>
	<!-- ======================================================== -->
	<complexType name="SphereType">
		<annotation>
			<documentation>A sphere is a gridded surface given as a
   family of circles whose positions vary linearly along the
   axis of the sphere, and whise radius varies in proportions to
   the cosine function of the central angle. The horizontal 
   circles resemble lines of constant latitude, and the vertical
   arcs resemble lines of constant longitude. 
   NOTE! If the control points are sorted in terms of increasing
   longitude, and increasing latitude, the upNormal of a sphere
   is the outward normal.
   EXAMPLE If we take a gridded set of latitudes and longitudes
   in degrees,(u,v) such as

	(-90,-180)  (-90,-90)  (-90,0)  (-90,  90) (-90, 180) 
	(-45,-180)  (-45,-90)  (-45,0)  (-45,  90) (-45, 180) 
	(  0,-180)  (  0,-90)  (  0,0)  (  0,  90) (  0, 180)
	( 45,-180)  ( 45,-90)  ( 45,0)  ( 45, -90) ( 45, 180)
	( 90,-180)  ( 90,-90)  ( 90,0)  ( 90, -90) ( 90, 180)
   
   And map these points to 3D using the usual equations (where R
   is the radius of the required sphere).

    z = R sin u
    x = (R cos u)(sin v)
    y = (R cos u)(cos v)

   We have a sphere of Radius R, centred at (0,0), as a gridded
   surface. Notice that the entire first row and the entire last
   row of the control points map to a single point in each 3D
   Euclidean space, North and South poles respectively, and that
   each horizontal curve closes back on itself forming a 
   geometric cycle. This gives us a metrically bounded (of finite
   size), topologically unbounded (not having a boundary, a
   cycle) surface.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGriddedSurfaceType">
				<attribute name="horizontalCurveType" type="gml:CurveInterpolationType" fixed="circularArc3Points"/>
				<attribute name="verticalCurveType" type="gml:CurveInterpolationType" fixed="circularArc3Points"/>
			</extension>
		</complexContent>
	</complexType>
	<!-- ======================================================== -->
	<element name="PolyhedralSurface" type="gml:PolyhedralSurfaceType" substitutionGroup="gml:Surface"/>
	<!-- ======================================================== -->
	<complexType name="PolyhedralSurfaceType">
		<annotation>
			<documentation>A polyhedral surface is a surface composed
   of polygon surfaces connected along their common boundary 
   curves. This differs from the surface type only in the
   restriction on the types of surface patches acceptable.</documentation>
		</annotation>
		<complexContent>
			<restriction base="gml:SurfaceType">
				<sequence>
					<group ref="gml:StandardObjectProperties"/>
					<element ref="gml:polygonPatches">
						<annotation>
							<documentation>This property encapsulates the patches of 
      the polyhedral surface.</documentation>
						</annotation>
					</element>
				</sequence>
			</restriction>
		</complexContent>
	</complexType>
	<!-- ======================================================== -->
	<element name="polygonPatches" type="gml:PolygonPatchArrayPropertyType" substitutionGroup="gml:patches">
		<annotation>
			<documentation>This property element contains a list of
   polygon patches. The order of the patches is significant and 
   shall be preserved when processing the list.</documentation>
		</annotation>
	</element>
	<!-- ======================================================== -->
	<complexType name="PolygonPatchArrayPropertyType">
		<annotation>
			<documentation>This type defines a container for an array of 
   polygon patches.</documentation>
		</annotation>
		<complexContent>
			<restriction base="gml:SurfacePatchArrayPropertyType">
				<sequence minOccurs="0" maxOccurs="unbounded">
					<element ref="gml:PolygonPatch"/>
				</sequence>
			</restriction>
		</complexContent>
	</complexType>
	<!-- ======================================================== -->
	<element name="trianglePatches" type="gml:TrianglePatchArrayPropertyType" substitutionGroup="gml:patches">
		<annotation>
			<documentation>This property element contains a list of
   triangle patches. The order of the patches is significant and 
   shall be preserved when processing the list.</documentation>
		</annotation>
	</element>
	<!-- ======================================================== -->
	<complexType name="TrianglePatchArrayPropertyType">
		<annotation>
			<documentation>This type defines a container for an array of 
     triangle patches.</documentation>
		</annotation>
		<complexContent>
			<restriction base="gml:SurfacePatchArrayPropertyType">
				<sequence minOccurs="0" maxOccurs="unbounded">
					<element ref="gml:Triangle"/>
				</sequence>
			</restriction>
		</complexContent>
	</complexType>
	<!-- ======================================================== -->
	<element name="TriangulatedSurface" type="gml:TriangulatedSurfaceType" substitutionGroup="gml:Surface"/>
	<!-- ======================================================== -->
	<complexType name="TriangulatedSurfaceType">
		<annotation>
			<documentation>A triangulated surface is a polyhedral 
   surface that is composed only of triangles. There is no
   restriction on how the triangulation is derived.</documentation>
		</annotation>
		<complexContent>
			<restriction base="gml:SurfaceType">
				<sequence>
					<group ref="gml:StandardObjectProperties"/>
					<element ref="gml:trianglePatches">
						<annotation>
							<documentation>This property encapsulates the patches of 
      the triangulated surface.</documentation>
						</annotation>
					</element>
				</sequence>
			</restriction>
		</complexContent>
	</complexType>
	<!-- ======================================================== -->
	<element name="Tin" type="gml:TinType" substitutionGroup="gml:TriangulatedSurface"/>
	<!-- ======================================================== -->
	<complexType name="TinType">
		<annotation>
			<documentation>A tin is a triangulated surface that uses
   the Delauny algorithm or a similar algorithm complemented with
   consideration of breaklines, stoplines, and maximum length of 
   triangle sides. These networks satisfy the Delauny's criterion
   away from the modifications: Fore each triangle in the 
   network, the circle passing through its vertices does not
   contain, in its interior, the vertex of any other triangle.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:TriangulatedSurfaceType">
				<sequence>
					<element name="stopLines" type="gml:LineStringSegmentArrayPropertyType" minOccurs="0" maxOccurs="unbounded">
						<annotation>
							<documentation>Stoplines are lines where the local
       continuity or regularity of the surface is questionable.
       In the area of these pathologies, triangles intersecting
       a stopline shall be removed from the tin surface, leaving
       holes in the surface. If coincidence occurs on surface
       boundary triangles, the result shall be a change of the 
       surface boundary. Stoplines contains all these
       pathological segments as a set of line strings.</documentation>
						</annotation>
					</element>
					<element name="breakLines" type="gml:LineStringSegmentArrayPropertyType" minOccurs="0" maxOccurs="unbounded">
						<annotation>
							<documentation>Breaklines are lines of a critical
       nature to the shape of the surface, representing local
       ridges, or depressions (such as drainage lines) in the
       surface. As such their constituent segments must be
       included in the tin eve if doing so
       violates the Delauny criterion. Break lines contains these
       critical segments as a set of line strings.</documentation>
						</annotation>
					</element>
					<element name="maxLength" type="gml:LengthType">
						<annotation>
							<documentation>Areas of the surface where data is not 
       sufficiently dense to assure reasonable calculation shall be    
       removed by adding a retention criterion for triangles based 
       on the length of their sides. For many triangle sides  
       exceeding maximum length, the adjacent triangles to that 
       triangle side shall be removed from the surface.</documentation>
						</annotation>
					</element>
					<element name="controlPoint">
						<annotation>
							<documentation>The corners of the triangles in the TIN 
  are often referred to as pots. ControlPoint shall contain a 
  set of the GM_Position used as posts for this TIN. Since each  
  TIN contains triangles, there must be at least 3 posts. The 
       order in which these points are given does not affect the 
       surface that is represented. Application schemas may add 
       information based on ordering of control points to facilitate 
       the reconstruction of the TIN from the control points.</documentation>
						</annotation>
						<complexType>
							<choice>
								<element ref="gml:posList"/>
								<group ref="gml:geometricPositionGroup" minOccurs="3" maxOccurs="unbounded"/>
							</choice>
						</complexType>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="LineStringSegmentArrayPropertyType">
		<sequence>
			<element ref="gml:LineStringSegment" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<!-- primitive geometry objects (3-dimensional) -->
	<!-- =========================================================== -->
	<!-- =========================================================== -->
	<element name="_Solid" type="gml:AbstractSolidType" abstract="true" substitutionGroup="gml:_GeometricPrimitive">
		<annotation>
			<documentation>The "_Solid" element is the abstract head of the substituition group for all (continuous) solid elements.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="AbstractSolidType">
		<annotation>
			<documentation>An abstraction of a solid to support the different levels of complexity. A solid is always contiguous.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGeometricPrimitiveType"/>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="solidProperty" type="gml:SolidPropertyType">
		<annotation>
			<appinfo>
				<sch:pattern name="Check either href or content not both">
					<sch:rule context="gml:solidProperty">
						<sch:extends rule="hrefOrContent"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
			<documentation>This property element either references a solid via the XLink-attributes or contains the solid element. solidProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for _Solid.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="SolidPropertyType">
		<annotation>
			<documentation>A property that has a solid as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
		</annotation>
		<sequence minOccurs="0">
			<element ref="gml:_Solid"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup">
			<annotation>
				<documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
			</annotation>
		</attributeGroup>
	</complexType>
	<!-- =========================================================== -->
	<element name="solidArrayProperty" type="gml:SolidArrayPropertyType"/>
	<!-- =========================================================== -->
	<complexType name="SolidArrayPropertyType">
		<annotation>
			<documentation>A container for an array of solids. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements is not supported.</documentation>
		</annotation>
		<sequence minOccurs="0" maxOccurs="unbounded">
			<element ref="gml:_Solid"/>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<element name="Solid" type="gml:SolidType" substitutionGroup="gml:_Solid"/>
	<!-- =========================================================== -->
	<complexType name="SolidType">
		<annotation>
			<documentation>A solid is the basis for 3-dimensional geometry. The extent of a solid is defined by the boundary surfaces (shells). A shell is represented by a composite surface, where every  shell is used to represent a single connected component of the boundary of a solid. It consists of a composite surface (a list of orientable surfaces) connected in a topological cycle (an object whose boundary is empty). Unlike a Ring, a Shell's elements have no natural sort order. Like Rings, Shells are simple.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractSolidType">
				<sequence>
					<element name="exterior" type="gml:SurfacePropertyType" minOccurs="0">
						<annotation>
							<appinfo>
								<sch:pattern name="Check either href or content not both">
									<sch:rule context="gml:exterior">
										<sch:extends rule="hrefOrContent"/>
									</sch:rule>
								</sch:pattern>
							</appinfo>
							<documentation>Boundaries of solids are similar to surface boundaries. In normal 3-dimensional Euclidean space, one (composite) surface is distinguished as the exterior. In the more general case, this is not always possible.</documentation>
						</annotation>
					</element>
					<element name="interior" type="gml:SurfacePropertyType" minOccurs="0" maxOccurs="unbounded">
						<annotation>
							<appinfo>
								<sch:pattern name="Check either href or content not both">
									<sch:rule context="gml:interior">
										<sch:extends rule="hrefOrContent"/>
									</sch:rule>
								</sch:pattern>
							</appinfo>
							<documentation>Boundaries of solids are similar to surface boundaries.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<!-- predefined simple types (enumerations, simple typed arrays) -->
	<!-- =========================================================== -->
	<simpleType name="CurveInterpolationType">
		<annotation>
			<documentation>CurveInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an
application schema.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="linear"/>
			<enumeration value="geodesic"/>
			<enumeration value="circularArc3Points"/>
			<enumeration value="circularArc2PointWithBulge"/>
			<enumeration value="circularArcCenterPointWithRadius"/>
			<enumeration value="elliptical"/>
			<enumeration value="clothoid"/>
			<enumeration value="conic"/>
			<enumeration value="polynomialSpline"/>
			<enumeration value="cubicSpline"/>
			<enumeration value="rationalSpline"/>
		</restriction>
	</simpleType>
	<!-- =========================================================== -->
	<simpleType name="SurfaceInterpolationType">
		<annotation>
			<documentation>SurfaceInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an
application schema.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="none"/>
			<enumeration value="planar"/>
			<enumeration value="spherical"/>
			<enumeration value="elliptical"/>
			<enumeration value="conic"/>
			<enumeration value="tin"/>
			<enumeration value="parametricCurve"/>
			<enumeration value="polynomialSpline"/>
			<enumeration value="rationalSpline"/>
			<enumeration value="triangulatedSpline"/>
		</restriction>
	</simpleType>
	<!-- =========================================================== -->
	<simpleType name="KnotTypesType">
		<annotation>
			<documentation>Defines allowed values for the knots` type. Uniform knots implies that all knots are of multiplicity 1 and they differ by a positive constant from the preceding knot. Knots are quasi-uniform iff they are of multiplicity (degree + 1) at the ends, of multiplicity 1 elsewhere, and they differ by a positive constant from the preceding knot.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="uniform"/>
			<enumeration value="quasiUniform"/>
			<enumeration value="piecewiseBezier"/>
		</restriction>
	</simpleType>
    <!-- =========================================================== -->
    <!-- aggregate geometry objects -->
    <element name="_GeometricAggregate" type="gml:AbstractGeometricAggregateType" abstract="true" substitutionGroup="gml:_Geometry">
        <annotation>
            <documentation>The "_GeometricAggregate" element is the abstract head of the substituition group for all geometric aggremates.</documentation>
        </annotation>
    </element>
    <!-- =========================================================== -->
    <complexType name="AbstractGeometricAggregateType" abstract="true">
        <annotation>
            <documentation>This is the abstract root type of the geometric aggregates.</documentation>
        </annotation>
        <complexContent>
            <extension base="gml:AbstractGeometryType"/>
        </complexContent>
    </complexType>
    <!-- =========================================================== -->
    <element name="MultiGeometry" type="gml:MultiGeometryType" substitutionGroup="gml:_GeometricAggregate"/>
    <!-- ======================================================= -->
    <complexType name="MultiGeometryType">
        <annotation>
            <documentation>A geometry collection must include one or more geometries, referenced through geometryMember elements.</documentation>
        </annotation>
        <complexContent>
            <extension base="gml:AbstractGeometricAggregateType">
                <sequence>
                    <annotation>
                        <documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</documentation>
                    </annotation>
                    <element ref="gml:geometryMember" minOccurs="0" maxOccurs="unbounded"/>
                    <element ref="gml:geometryMembers" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <!-- =========================================================== -->
    <element name="multiGeometryProperty" type="gml:MultiGeometryPropertyType">
        <annotation>
            <appinfo>
                <sch:pattern name="Check either href or content not both">
                    <sch:rule context="gml:multiGeometryProperty">
                        <sch:extends rule="hrefOrContent"/>
                    </sch:rule>
                </sch:pattern>
            </appinfo>
            <documentation>This property element either references a geometric aggregate via the XLink-attributes or contains the "multi geometry" element. multiGeometryProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for _GeometricAggregate.</documentation>
        </annotation>
    </element>
    <!-- =========================================================== -->
    <complexType name="MultiGeometryPropertyType">
        <annotation>
            <documentation>A property that has a geometric aggregate as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
        </annotation>
        <sequence minOccurs="0">
            <element ref="gml:_GeometricAggregate"/>
        </sequence>
        <attributeGroup ref="gml:AssociationAttributeGroup">
            <annotation>
                <documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
            </annotation>
        </attributeGroup>
    </complexType>
    <!-- =========================================================== -->
    <element name="MultiPoint" type="gml:MultiPointType" substitutionGroup="gml:_GeometricAggregate"/>
    <!-- ======================================================= -->
    <complexType name="MultiPointType">
        <annotation>
            <documentation>A MultiPoint is defined by one or more Points, referenced through pointMember elements.</documentation>
        </annotation>
        <complexContent>
            <extension base="gml:AbstractGeometricAggregateType">
                <sequence>
                    <annotation>
                        <documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</documentation>
                    </annotation>
                    <element ref="gml:pointMember" minOccurs="0" maxOccurs="unbounded"/>
                    <element ref="gml:pointMembers" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <!-- =========================================================== -->
    <element name="multiPointProperty" type="gml:MultiPointPropertyType">
        <annotation>
            <appinfo>
                <sch:pattern name="Check either href or content not both">
                    <sch:rule context="gml:multiPointProperty">
                        <sch:extends rule="hrefOrContent"/>
                    </sch:rule>
                </sch:pattern>
            </appinfo>
            <documentation>This property element either references a point aggregate via the XLink-attributes or contains the "multi point" element. multiPointProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for MultiPoint.</documentation>
        </annotation>
    </element>
    <!-- =========================================================== -->
    <complexType name="MultiPointPropertyType">
        <annotation>
            <documentation>A property that has a collection of points as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
        </annotation>
        <sequence minOccurs="0">
            <element ref="gml:MultiPoint"/>
        </sequence>
        <attributeGroup ref="gml:AssociationAttributeGroup">
            <annotation>
                <documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
            </annotation>
        </attributeGroup>
    </complexType>
    <!-- =========================================================== -->
    <element name="MultiCurve" type="gml:MultiCurveType" substitutionGroup="gml:_GeometricAggregate"/>
    <!-- ======================================================= -->
    <complexType name="MultiCurveType">
        <annotation>
            <documentation>A MultiCurve is defined by one or more Curves, referenced through curveMember elements.</documentation>
        </annotation>
        <complexContent>
            <extension base="gml:AbstractGeometricAggregateType">
                <sequence>
                    <annotation>
                        <documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</documentation>
                    </annotation>
                    <element ref="gml:curveMember" minOccurs="0" maxOccurs="unbounded"/>
                    <element ref="gml:curveMembers" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <!-- =========================================================== -->
    <element name="multiCurveProperty" type="gml:MultiCurvePropertyType">
        <annotation>
            <appinfo>
                <sch:pattern name="Check either href or content not both">
                    <sch:rule context="gml:multiCurveProperty">
                        <sch:extends rule="hrefOrContent"/>
                    </sch:rule>
                </sch:pattern>
            </appinfo>
            <documentation>This property element either references a curve aggregate via the XLink-attributes or contains the "multi curve" element. multiCurveProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for MultiCurve.</documentation>
        </annotation>
    </element>
    <!-- =========================================================== -->
    <complexType name="MultiCurvePropertyType">
        <annotation>
            <documentation>A property that has a collection of curves as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
        </annotation>
        <sequence minOccurs="0">
            <element ref="gml:MultiCurve"/>
        </sequence>
        <attributeGroup ref="gml:AssociationAttributeGroup">
            <annotation>
                <documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
            </annotation>
        </attributeGroup>
    </complexType>
    <!-- =========================================================== -->
    <element name="MultiSurface" type="gml:MultiSurfaceType" substitutionGroup="gml:_GeometricAggregate"/>
    <!-- ======================================================= -->
    <complexType name="MultiSurfaceType">
        <annotation>
            <documentation>A MultiSurface is defined by one or more Surfaces, referenced through surfaceMember elements.</documentation>
        </annotation>
        <complexContent>
            <extension base="gml:AbstractGeometricAggregateType">
                <sequence>
                    <annotation>
                        <documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</documentation>
                    </annotation>
                    <element ref="gml:surfaceMember" minOccurs="0" maxOccurs="unbounded"/>
                    <element ref="gml:surfaceMembers" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <!-- =========================================================== -->
    <element name="multiSurfaceProperty" type="gml:MultiSurfacePropertyType">
        <annotation>
            <appinfo>
                <sch:pattern name="Check either href or content not both">
                    <sch:rule context="gml:multiSurfaceProperty">
                        <sch:extends rule="hrefOrContent"/>
                    </sch:rule>
                </sch:pattern>
            </appinfo>
            <documentation>This property element either references a surface aggregate via the XLink-attributes or contains the "multi surface" element. multiSurfaceProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for MultiSurface.</documentation>
        </annotation>
    </element>
    <!-- =========================================================== -->
    <complexType name="MultiSurfacePropertyType">
        <annotation>
            <documentation>A property that has a collection of surfaces as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
        </annotation>
        <sequence minOccurs="0">
            <element ref="gml:MultiSurface"/>
        </sequence>
        <attributeGroup ref="gml:AssociationAttributeGroup">
            <annotation>
                <documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
            </annotation>
        </attributeGroup>
    </complexType>
    <!-- ============================================================ -->
    <element name="MultiSolid" type="gml:MultiSolidType" substitutionGroup="gml:_GeometricAggregate"/>
    <!-- ======================================================= -->
    <complexType name="MultiSolidType">
        <annotation>
            <documentation>A MultiSolid is defined by one or more Solids, referenced through solidMember elements.</documentation>
        </annotation>
        <complexContent>
            <extension base="gml:AbstractGeometricAggregateType">
                <sequence>
                    <annotation>
                        <documentation>The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.</documentation>
                    </annotation>
                    <element ref="gml:solidMember" minOccurs="0" maxOccurs="unbounded"/>
                    <element ref="gml:solidMembers" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <!-- =========================================================== -->
    <element name="multiSolidProperty" type="gml:MultiSolidPropertyType">
        <annotation>
            <appinfo>
                <sch:pattern name="Check either href or content not both">
                    <sch:rule context="gml:multiSolidProperty">
                        <sch:extends rule="hrefOrContent"/>
                    </sch:rule>
                </sch:pattern>
            </appinfo>
            <documentation>This property element either references a solid aggregate via the XLink-attributes or contains the "multi solid" element. multiSolidProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for MultiSolid.</documentation>
        </annotation>
    </element>
    <!-- =========================================================== -->
    <complexType name="MultiSolidPropertyType">
        <annotation>
            <documentation>A property that has a collection of solids as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
        </annotation>
        <sequence minOccurs="0">
            <element ref="gml:MultiSolid"/>
        </sequence>
        <attributeGroup ref="gml:AssociationAttributeGroup">
            <annotation>
                <documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
            </annotation>
        </attributeGroup>
    </complexType>
    <!-- =========================================================== -->
    <!-- 
    
    The following types and elements are deprecated and should not be used !
    For backward compatibility with GML2 only
    
    -->
    <!-- =========================================================== -->
    <element name="MultiPolygon" type="gml:MultiPolygonType" substitutionGroup="gml:_GeometricAggregate">
        <annotation>
            <documentation>Deprecated with GML 3.0 and included for backwards compatibility with GML 2. Use the "MultiSurface" element instead.</documentation>
        </annotation>
    </element>
    <!-- =========================================================== -->
    <element name="MultiLineString" type="gml:MultiLineStringType" substitutionGroup="gml:_GeometricAggregate">
        <annotation>
            <documentation>Deprecated with GML 3.0 and included for backwards compatibility with GML 2. Use the "MultiCurve" element instead.</documentation>
        </annotation>
    </element>
    <!-- =========================================================== -->
    <complexType name="MultiLineStringType">
        <annotation>
            <documentation>A MultiLineString is defined by one or more LineStrings, referenced through lineStringMember elements. Deprecated with GML version 3.0. Use MultiCurveType instead.</documentation>
        </annotation>
        <complexContent>
            <extension base="gml:AbstractGeometricAggregateType">
                <sequence>
                    <element ref="gml:lineStringMember" minOccurs="0" maxOccurs="unbounded"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <!-- =========================================================== -->
    <complexType name="MultiLineStringPropertyType">
        <annotation>
            <documentation>This type is deprecated with GML 3 and shall not be used. It is included for backwards compatibility with GML 2. Use MultiCurvePropertyType instead.
A property that has a collection of line strings as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
        </annotation>
        <sequence minOccurs="0">
            <element ref="gml:MultiLineString"/>
        </sequence>
        <attributeGroup ref="gml:AssociationAttributeGroup">
            <annotation>
                <documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
            </annotation>
        </attributeGroup>
    </complexType>
    <!-- =========================================================== -->
    <complexType name="MultiPolygonType">
        <annotation>
            <documentation>A MultiPolygon is defined by one or more Polygons, referenced through polygonMember elements. Deprecated with GML version 3.0. Use MultiSurfaceType instead.</documentation>
        </annotation>
        <complexContent>
            <extension base="gml:AbstractGeometricAggregateType">
                <sequence>
                    <element ref="gml:polygonMember" minOccurs="0" maxOccurs="unbounded"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <!-- =========================================================== -->
    <complexType name="MultiPolygonPropertyType">
        <annotation>
            <documentation>This type is deprecated with GML 3 and shall not be used. It is included for backwards compatibility with GML 2. Use MultiSurfacePropertyType instead.

A property that has a collection of polygons as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.</documentation>
        </annotation>
        <sequence minOccurs="0">
            <element ref="gml:MultiPolygon"/>
        </sequence>
        <attributeGroup ref="gml:AssociationAttributeGroup">
            <annotation>
                <documentation>This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.</documentation>
            </annotation>
        </attributeGroup>
    </complexType>
    <!-- =========================================================== -->
    <!-- =========================================================== -->
    <element name="geometryMember" type="gml:GeometryPropertyType">
        <annotation>
            <documentation>This property element either references a geometry element via the XLink-attributes or contains the geometry element.</documentation>
        </annotation>
    </element>
    <element name="geometryMembers" type="gml:GeometryArrayPropertyType">
        <annotation>
            <documentation>This property element contains a list of geometry elements. The order of the elements is significant and shall be preserved when processing the array.</documentation>
        </annotation>
    </element>
    <element name="pointMember" type="gml:PointPropertyType">
        <annotation>
            <documentation>This property element either references a Point via the XLink-attributes or contains the Point element.</documentation>
        </annotation>
    </element>
    <element name="pointMembers" type="gml:PointArrayPropertyType">
        <annotation>
            <documentation>This property element contains a list of points. The order of the elements is significant and shall be preserved when processing the array.</documentation>
        </annotation>
    </element>
    <element name="curveMembers" type="gml:CurveArrayPropertyType">
        <annotation>
            <documentation>This property element contains a list of curves. The order of the elements is significant and shall be preserved when processing the array.</documentation>
        </annotation>
    </element>
    <element name="surfaceMember" type="gml:SurfacePropertyType">
        <annotation>
            <documentation>This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element which is substitutable for "_Surface".</documentation>
        </annotation>
    </element>
    <element name="surfaceMembers" type="gml:SurfaceArrayPropertyType">
        <annotation>
            <documentation>This property element contains a list of surfaces. The order of the elements is significant and shall be preserved when processing the array.</documentation>
        </annotation>
    </element>
    <element name="solidMember" type="gml:SolidPropertyType">
        <annotation>
            <documentation>This property element either references a solid via the XLink-attributes or contains the solid element. A solid element is any element which is substitutable for "_Solid".</documentation>
        </annotation>
    </element>
    <element name="solidMembers" type="gml:SolidArrayPropertyType">
        <annotation>
            <documentation>This property element contains a list of solids. The order of the elements is significant and shall be preserved when processing the array.</documentation>
        </annotation>
    </element>
    <!-- some named geometry properties - for backward compatibility with GML2 -->
    <element name="multiCenterOf" type="gml:MultiPointPropertyType"/>
    <element name="multiPosition" type="gml:MultiPointPropertyType"/>
    <element name="multiCenterLineOf" type="gml:MultiCurvePropertyType"/>
    <element name="multiEdgeOf" type="gml:MultiCurvePropertyType"/>
    <element name="multiCoverage" type="gml:MultiSurfacePropertyType"/>
    <element name="multiExtentOf" type="gml:MultiSurfacePropertyType"/>
    <!-- 
    The following types and elements are deprecated and should not be used !
    -->
    <element name="multiLocation" type="gml:MultiPointPropertyType">
        <annotation>
            <appinfo>deprecated</appinfo>
            <documentation>Deprecated with GML 3.0 and included only for backwards compatibility with GML 2.0. Use "curveMember" instead.
This property element either references a line string via the XLink-attributes or contains the line string element.</documentation>
        </annotation>
    </element>
    <element name="lineStringMember" type="gml:LineStringPropertyType">
        <annotation>
            <appinfo>deprecated</appinfo>
            <documentation>Deprecated with GML 3.0 and included only for backwards compatibility with GML 2.0. Use "curveMember" instead.
This property element either references a line string via the XLink-attributes or contains the line string element.</documentation>
        </annotation>
    </element>
    <element name="polygonMember" type="gml:PolygonPropertyType">
        <annotation>
            <appinfo>deprecated</appinfo>
            <documentation>Deprecated with GML 3.0 and included only for backwards compatibility with GML 2.0. Use "surfaceMember" instead.
This property element either references a polygon via the XLink-attributes or contains the polygon element.</documentation>
        </annotation>
    </element>
    <!-- basicTypes.xsd -->
    <simpleType name="NullEnumeration">
    <annotation>
      <documentation> Some common reasons for a null value:   
			
        innapplicable - the object does not have a value
        missing - The correct value is not readily available to the sender of this data.  
                           Furthermore, a correct value may not exist.
        template - the value will be available later
        unknown - The correct value is not known to, and not computable by, the sender of this data. 
                           However, a correct value probably exists.
        withheld - the value is not divulged 
        
        other:reason - as indicated by "reason" string
        
        Specific communities may agree to assign more strict semantics when these terms are used in a particular context.  
      </documentation>
    </annotation>
    <union>
      <simpleType>
        <restriction base="string">
          <enumeration value="inapplicable"/>
          <enumeration value="missing"/>
          <enumeration value="template"/>
          <enumeration value="unknown"/>
          <enumeration value="withheld"/>
        </restriction>
      </simpleType>
      <simpleType>
        <restriction base="string">
          <pattern value="other:\w{2,}"/>
        </restriction>
      </simpleType>
    </union>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="NullType">
    <annotation>
      <documentation>Utility type for null elements.  The value may be selected from one of the enumerated tokens, or may be a URI in which case this should identify a resource which describes the reason for the null. </documentation>
    </annotation>
    <union memberTypes="gml:NullEnumeration anyURI"/>
  </simpleType>
  <!-- =========================================================== -->
  <element name="Null" type="gml:NullType"/>
  <!-- ===================================================== -->
  <simpleType name="SignType">
    <annotation>
      <documentation>Utility type used in various places 
      - e.g. to indicate the direction of topological objects;
      "+" for forwards, or "-" for backwards.</documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="-"/>
      <enumeration value="+"/>
    </restriction>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="booleanOrNull">
    <annotation>
      <documentation>Union of the XML Schema boolean type and the GML Nulltype.  An element which uses this type may have content which is either a boolean {0,1,true,false} or a value from Nulltype</documentation>
    </annotation>
    <union memberTypes="gml:NullEnumeration boolean anyURI"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="booleanOrNullList">
    <annotation>
      <documentation>XML List based on the union type defined above.  An element declared with this type contains a space-separated list of boolean values {0,1,true,false} with null values interspersed as needed</documentation>
    </annotation>
    <list itemType="gml:booleanOrNull"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="booleanList">
    <annotation>
      <documentation>XML List based on XML Schema boolean type.  An element of this type contains a space-separated list of boolean values {0,1,true,false}</documentation>
    </annotation>
    <list itemType="boolean"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="stringOrNull">
    <annotation>
      <documentation>Union of the XML Schema string type and the GML Nulltype.  An element which uses this type may have content which is either a string or a value from Nulltype.  Note that a "string" may contain whitespace.  </documentation>
    </annotation>
    <union memberTypes="gml:NullEnumeration string anyURI"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="NameOrNull">
    <annotation>
      <documentation>Union of the XML Schema Name type and the GML Nulltype.  An element which uses this type may have content which is either a Name or a value from Nulltype.  Note that a "Name" may not contain whitespace.  </documentation>
    </annotation>
    <union memberTypes="gml:NullEnumeration Name anyURI"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="NameOrNullList">
    <annotation>
      <documentation>XML List based on the union type defined above.  An element declared with this type contains a space-separated list of Name values with null values interspersed as needed</documentation>
    </annotation>
    <list itemType="gml:NameOrNull"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="NameList">
    <annotation>
      <documentation>XML List based on XML Schema Name type.  An element of this type contains a space-separated list of Name values</documentation>
    </annotation>
    <list itemType="Name"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="doubleOrNull">
    <annotation>
      <documentation>Union of the XML Schema double type and the GML Nulltype.  An element which uses this type may have content which is either a double or a value from Nulltype</documentation>
    </annotation>
    <union memberTypes="gml:NullEnumeration double anyURI"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="doubleOrNullList">
    <annotation>
      <documentation>XML List based on the union type defined above.  An element declared with this type contains a space-separated list of double values with null values interspersed as needed</documentation>
    </annotation>
    <list itemType="gml:doubleOrNull"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="doubleList">
    <annotation>
      <documentation>XML List based on XML Schema double type.  An element of this type contains a space-separated list of double values</documentation>
    </annotation>
    <list itemType="double"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="integerOrNull">
    <annotation>
      <documentation>Union of the XML Schema integer type and the GML Nulltype.  An element which uses this type may have content which is either an integer or a value from Nulltype</documentation>
    </annotation>
    <union memberTypes="gml:NullEnumeration integer anyURI"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="integerOrNullList">
    <annotation>
      <documentation>XML List based on the union type defined above.  An element declared with this type contains a space-separated list of integer values with null values interspersed as needed</documentation>
    </annotation>
    <list itemType="gml:integerOrNull"/>
  </simpleType>
  <!-- =========================================================== -->
  <simpleType name="integerList">
    <annotation>
      <documentation>XML List based on XML Schema integer type.  An element of this type contains a space-separated list of integer values</documentation>
    </annotation>
    <list itemType="integer"/>
  </simpleType>
  <!-- =========================================================== -->
  <complexType name="CodeType">
    <annotation>
      <documentation>Name or code with an (optional) authority.  Text token.  
      If the codeSpace attribute is present, then its value should identify a dictionary, thesaurus 
      or authority for the term, such as the organisation who assigned the value, 
      or the dictionary from which it is taken.  
      A text string with an optional codeSpace attribute. </documentation>
    </annotation>
    <simpleContent>
      <extension base="string">
        <attribute name="codeSpace" type="anyURI" use="optional"/>
      </extension>
    </simpleContent>
  </complexType>
  <!-- =========================================================== -->
  <complexType name="CodeListType">
    <annotation>
      <documentation>List of values on a uniform nominal scale.  List of text tokens.   
      In a list context a token should not include any spaces, so xsd:Name is used instead of xsd:string.   
      If a codeSpace attribute is present, then its value is a reference to 
      a Reference System for the value, a dictionary or code list.</documentation>
    </annotation>
    <simpleContent>
      <extension base="gml:NameList">
        <attribute name="codeSpace" type="anyURI" use="optional"/>
      </extension>
    </simpleContent>
  </complexType>
  <!-- =========================================================== -->
  <complexType name="CodeOrNullListType">
    <annotation>
      <documentation>List of values on a uniform nominal scale.  List of text tokens.   
      In a list context a token should not include any spaces, so xsd:Name is used instead of xsd:string.  
      A member of the list may be a typed null.  
      If a codeSpace attribute is present, then its value is a reference to 
      a Reference System for the value, a dictionary or code list.</documentation>
    </annotation>
    <simpleContent>
      <extension base="gml:NameOrNullList">
        <attribute name="codeSpace" type="anyURI" use="optional"/>
      </extension>
    </simpleContent>
  </complexType>
  <!-- =========================================================== -->
  <complexType name="MeasureType">
    <annotation>
      <documentation>Number with a scale.  
      The value of uom (Units Of Measure) attribute is a reference to a Reference System for the amount, either a ratio or position scale. </documentation>
    </annotation>
    <simpleContent>
      <extension base="double">
        <attribute name="uom" type="anyURI" use="required"/>
      </extension>
    </simpleContent>
  </complexType>
  <!-- =========================================================== -->
  <complexType name="MeasureListType">
    <annotation>
      <documentation>List of numbers with a uniform scale.  
      The value of uom (Units Of Measure) attribute is a reference to 
      a Reference System for the amount, either a ratio or position scale. </documentation>
    </annotation>
    <simpleContent>
      <extension base="gml:doubleList">
        <attribute name="uom" type="anyURI" use="required"/>
      </extension>
    </simpleContent>
  </complexType>
  <!-- =========================================================== -->
  <complexType name="MeasureOrNullListType">
    <annotation>
      <documentation>List of numbers with a uniform scale.  
      A member of the list may be a typed null. 
      The value of uom (Units Of Measure) attribute is a reference to 
      a Reference System for the amount, either a ratio or position scale. </documentation>
    </annotation>
    <simpleContent>
      <extension base="gml:doubleOrNullList">
        <attribute name="uom" type="anyURI" use="required"/>
      </extension>
    </simpleContent>
  </complexType>
  <!-- =========================================================== -->
  <complexType name="CoordinatesType">
    <annotation>
      <documentation>Tables or arrays of tuples.  
        May be used for text-encoding of values from a table.  
        Actually just a string, but allows the user to indicate which characters are used as separators.  
        The value of the 'cs' attribute is the separator for coordinate values, 
        and the value of the 'ts' attribute gives the tuple separator (a single space by default); 
        the default values may be changed to reflect local usage.
        Defaults to CSV within a tuple, space between tuples.  
        However, any string content will be schema-valid.  </documentation>
    </annotation>
    <simpleContent>
      <extension base="string">
        <attribute name="decimal" type="string" default="."/>
        <attribute name="cs" type="string" default=","/>
        <attribute name="ts" type="string" default="&#x20;"/>
      </extension>
    </simpleContent>
  </complexType>
  <!-- =========================================================== -->
  <simpleType name="NCNameList">
    <annotation>
      <documentation>A set of values, representing a list of token with the lexical value space of NCName. The tokens are seperated by whitespace.</documentation>
    </annotation>
    <list itemType="NCName"/>
  </simpleType>
  <!-- ============================================================== -->
  <simpleType name="QNameList">
    <annotation>
      <documentation>A set of values, representing a list of token with the lexical value space of QName. The tokens are seperated by whitespace.</documentation>
    </annotation>
    <list itemType="QName"/>
  </simpleType>
	<!-- =========== Abstract "Object" is "anyType" ============= -->
	<!-- ===== Global element at the head of the "Object" substitution group ======== -->
	<element name="_Object" abstract="true">
		<annotation>
			<documentation>This abstract element is the head of a substitutionGroup hierararchy which may contain either simpleContent or complexContent elements.  It is used to assert the model position of "class" elements declared in other GML schemas.</documentation>
		</annotation>
	</element>
	<!-- =========== Abstract "GMLobject" supertype ===================== -->
	<element name="_GML" type="gml:AbstractGMLType" abstract="true" substitutionGroup="gml:_Object">
		<annotation>
			<documentation>Global element which acts as the head of a substitution group that may include any element which is a GML feature, object, geometry or complex value</documentation>
		</annotation>
	</element>
	<group name="StandardObjectProperties">
		<annotation>
			<documentation>This content model group makes it easier to construct types that 
      derive from AbstractGMLType and its descendents "by restriction".  
      A reference to the group saves having to enumerate the standard object properties.</documentation>
		</annotation>
		<sequence>
			<element ref="gml:metaDataProperty" minOccurs="0" maxOccurs="unbounded"/>
			<element ref="gml:description" minOccurs="0"/>
			<element ref="gml:name" minOccurs="0" maxOccurs="unbounded">
				<annotation>
					<documentation>Multiple names may be provided.  These will often be distinguished by being assigned by different authorities, as indicated by the value of the codeSpace attribute.  In an instance document there will usually only be one name per authority.</documentation>
				</annotation>
			</element>
		</sequence>
	</group>
	<complexType name="AbstractGMLType" abstract="true">
		<annotation>
			<documentation>All complexContent GML elements are directly or indirectly derived from this abstract supertype 
	to establish a hierarchy of GML types that may be distinguished from other XML types by their ancestry. 
	Elements in this hierarchy may have an ID and are thus referenceable.</documentation>
		</annotation>
		<sequence>
			<group ref="gml:StandardObjectProperties"/>
		</sequence>
		<attribute ref="gml:id" use="optional"/>
	</complexType>
	<!-- =========== Concrete "Collection" supertype ========================= -->
	<element name="Bag" type="gml:BagType" substitutionGroup="gml:_GML">
		<annotation>
			<documentation>Generic GML element to contain a heterogeneous collection of GML _Objects</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="BagType">
		<annotation>
			<documentation>A non-abstract generic collection type that can be used as a document element for a collection of any GML types - Geometries, Topologies, Features ...

FeatureCollections may only contain Features.  GeometryCollections may only contain Geometrys.  Bags are less constrained  they must contain objects that are substitutable for gml:_Object.  This may mix several levels, including Features, Definitions, Dictionaries, Geometries etc.  

The content model would ideally be 
   member 0..*
   members 0..1
   member 0..*
for maximum flexibility in building a collection from both homogeneous and distinct components: 
included "member" elements each contain a single Object
an included "members" element contains a set of Objects 

However, this is non-deterministic, thus prohibited by XSD.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGMLType">
				<sequence>
					<element ref="gml:member" minOccurs="0" maxOccurs="unbounded"/>
					<element ref="gml:members" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========== Concrete "Array" supertype ========================= -->
	<element name="Array" type="gml:ArrayType" substitutionGroup="gml:_GML">
		<annotation>
			<documentation>Generic GML element to contain a homogeneous array of GML _Objects</documentation>
		</annotation>
	</element>
	<complexType name="ArrayType">
		<annotation>
			<documentation>A non-abstract generic collection type that can be used as a document element for a homogeneous collection of any GML types - Geometries, Topologies, Features ...</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGMLType">
				<sequence>
					<element ref="gml:members" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========== Abstract Metadata supertype ========================= -->
	<element name="_MetaData" type="gml:AbstractMetaDataType" abstract="true" substitutionGroup="gml:_Object">
		<annotation>
			<documentation>Abstract element which acts as the head of a substitution group for packages of MetaData properties.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="AbstractMetaDataType" abstract="true" mixed="true">
		<annotation>
			<documentation>An abstract base type for complex metadata types.</documentation>
		</annotation>
		<attribute ref="gml:id" use="optional"/>
	</complexType>
	<!-- =========== Container for Generic Metadata ========================= -->
	<element name="GenericMetaData" type="gml:GenericMetaDataType" substitutionGroup="gml:_MetaData">
		<annotation>
			<documentation>Concrete element in the _MetaData substitution group, which permits any well-formed XML content.  Intended to act as a container for metadata defined in external schemas, for which it is not possible to add the concrete components to the GML _MetaData substitution group directly. Deprecated with GML version 3.1.0.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="GenericMetaDataType" mixed="true">
		<annotation>
			<documentation>Deprecated with GML version 3.1.0.</documentation>
		</annotation>
		<complexContent mixed="true">
			<extension base="gml:AbstractMetaDataType">
				<sequence>
					<any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- ==== property types for unspecified association - by Value or by Reference ==== -->
	<!-- ====== single Objects - by Value or by Reference ======== -->
	<element name="_association" type="gml:AssociationType" abstract="true"/>
	<!-- =========================================================== -->
	<element name="_strictAssociation" type="gml:AssociationType" abstract="true">
		<annotation>
			<appinfo>
				<sch:pattern name="refAndContent co-occurence prohibited">
					<sch:rule context="gml:_strictAssociation">
						<sch:extends rule="hrefOrContent"/>
					</sch:rule>
				</sch:pattern>
			</appinfo>
			<documentation>must carry a reference to an object or contain an object but not both</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<element name="member" type="gml:AssociationType"/>
	<!-- =========================================================== -->
	<complexType name="AssociationType">
		<annotation>
			<documentation>A pattern or base for derived types used to specify complex types corresponding to an  unspecified UML association - either composition or aggregation.  Restricts the cardinality of Objects contained in the association to a maximum of one.  An instance of this type can contain an element representing an Object, or serve as a pointer to a remote Object.  

Descendents of this type can be restricted in an application schema to 
* allow only specified classes as valid participants in the aggregation
* allow only association by reference (i.e. empty the content model) or by value (i.e. remove the xlinks).    

When used for association by reference, the value of the gml:remoteSchema attribute can be used to locate a schema fragment that constrains the target instance.   

In many cases it is desirable to impose the constraint prohibiting the occurence of both reference and value in the same instance, as that would be ambiguous.  This is accomplished by adding a directive in the annotation element of the element declaration.  This directive can be in the form of normative prose, or can use a Schematron pattern to automatically constrain co-occurrence - see the declaration for _strictAssociation below.   

If co-occurence is not prohibited, then both a link and content may be present.  If this occurs in an instance, then the rule for interpretation is that the instance found by traversing the href provides the normative value of the property, and should be used when possible.  The value(s) included as content may be used if the remote instance cannot be resolved.  This may be considered to be a "cached" version of the value(s).</documentation>
		</annotation>
		<sequence minOccurs="0">
			<element ref="gml:_Object"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup"/>
	</complexType>
	<!-- =========================================================== -->
	<element name="_reference" type="gml:ReferenceType" abstract="true"/>
	<!-- =========================================================== -->
	<complexType name="ReferenceType">
		<annotation>
			<documentation>A pattern or base for derived types used to specify complex types corresponding to a UML aggregation association.  An instance of this type serves as a pointer to a remote Object.</documentation>
		</annotation>
		<sequence/>
		<attributeGroup ref="gml:AssociationAttributeGroup"/>
	</complexType>
	<!-- =========================================================== -->
	<!-- ========= multiple objects  - by Value or by Reference ================== -->
	<element name="members" type="gml:ArrayAssociationType"/>
	<!-- =========================================================== -->
	<complexType name="ArrayAssociationType">
		<annotation>
			<documentation>A base for derived types used to specify complex types containing an array of objects, by unspecified UML association - either composition or aggregation.  An instance of this type contains elements representing Objects.

Ideally this type would be derived by extension of AssociationType.  
However, this leads to a non-deterministic content model, since both the base and the extension have minOccurs="0", and is thus prohibited in XML Schema.</documentation>
		</annotation>
		<sequence>
			<element ref="gml:_Object" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<!-- =========== Abstract "property" supertype ========================= -->
	<element name="metaDataProperty" type="gml:MetaDataPropertyType">
		<annotation>
			<documentation>Contains or refers to a metadata package that contains metadata properties.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="MetaDataPropertyType">
		<annotation>
			<documentation>Base type for complex metadata property types.</documentation>
		</annotation>
		<sequence minOccurs="0">
			<!-- <element ref="gml:_MetaData"/> -->
			<any processContents="lax"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup"/>
		<attribute name="about" type="anyURI" use="optional"/>
	</complexType>
	<!-- =========================================================== -->
	<!-- ==========================================================
	global attribute, attribute group and element declarations 
	============================================================  -->
	<attribute name="id" type="ID">
		<annotation>
			<documentation>Database handle for the object.  It is of XML type ID, so is constrained to be unique in the XML document within which it occurs.  An external identifier for the object in the form of a URI may be constructed using standard XML and XPointer methods.  This is done by concatenating the URI for the document, a fragment separator, and the value of the id attribute.</documentation>
		</annotation>
	</attribute>
	<!-- =========================================================== -->
	<attribute name="remoteSchema" type="anyURI">
		<annotation>
			<documentation>Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.</documentation>
		</annotation>
	</attribute>
	<!-- =========================================================== -->
	<attributeGroup name="AssociationAttributeGroup">
		<annotation>
			<documentation>Attribute group used to enable property elements to refer to their value remotely. It contains the simple link components from xlinks.xsd, with all members optional, and the remoteSchema attribute, which is also optional.  These attributes can be attached to any element, thus allowing it to act as a pointer. The 'remoteSchema' attribute allows an element  that carries link attributes to indicate that the element is declared  in a remote schema rather than by the schema that constrains the current document instance.</documentation>
		</annotation>
		<attributeGroup ref="xlink:simpleLink"/>
		<attribute ref="gml:remoteSchema" use="optional"/>
	</attributeGroup>
	<!-- =========================================================== -->
	<element name="name" type="gml:CodeType">
		<annotation>
			<documentation>Label for the object, normally a descriptive name. An object may have several names, typically assigned by different authorities.  The authority for a name is indicated by the value of its (optional) codeSpace attribute.  The name may or may not be unique, as determined by the rules of the organization responsible for the codeSpace.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<element name="description" type="gml:StringOrRefType">
		<annotation>
			<documentation>Contains a simple text description of the object, or refers to an external description.</documentation>
		</annotation>
	</element>
	<!-- ===================================================== -->
	<complexType name="StringOrRefType">
		<annotation>
			<documentation>This type is available wherever there is a need for a "text" type property. It is of string type, so the text can be included inline, but the value can also be referenced remotely via xlinks from the AssociationAttributeGroup. If the remote reference is present, then the value obtained by traversing the link should be used, and the string content of the element can be used for an annotation.</documentation>
		</annotation>
		<simpleContent>
			<extension base="string">
				<attributeGroup ref="gml:AssociationAttributeGroup"/>
			</extension>
		</simpleContent>
	</complexType>
	<!-- === Dictionary and Definition components === -->
	<group name="StandardDefinitionProperties">
		<annotation>
			<documentation>This content model group makes it easier to construct types that 
      derive from DefinitionType and its descendents "by restriction".  
      A reference to the group saves having to enumerate the standard definition properties. 
      See definition of StandardObjectProperties for more documentation</documentation>
		</annotation>
		<sequence>
			<element ref="gml:metaDataProperty" minOccurs="0" maxOccurs="unbounded"/>
			<element ref="gml:description" minOccurs="0"/>
			<element ref="gml:name" maxOccurs="unbounded"/>
		</sequence>
	</group>
	<!-- ===================================================== -->
	<element name="Definition" type="gml:DefinitionType" substitutionGroup="gml:_GML"/>
	<!-- ===================================================== -->
	<complexType name="DefinitionType">
		<annotation>
			<documentation>A definition, which can be included in or referenced by a dictionary. In this extended type, the inherited "description" optional element can hold the definition whenever only text is needed. The inherited "name" elements can provide one or more brief terms for which this is the definition. The inherited "metaDataProperty" elements can be used to reference or include more information about this definition.  
The gml:id attribute is required - it must be possible to reference this definition using this handle.  </documentation>
		</annotation>
		<complexContent>
			<restriction base="gml:AbstractGMLType">
				<sequence>
					<element ref="gml:metaDataProperty" minOccurs="0" maxOccurs="unbounded"/>
					<element ref="gml:description" minOccurs="0"/>
					<element ref="gml:name" maxOccurs="unbounded"/>
				</sequence>
				<attribute ref="gml:id" use="required"/>
			</restriction>
		</complexContent>
	</complexType>
	<!-- ===================================================== -->
	<element name="Dictionary" type="gml:DictionaryType" substitutionGroup="gml:Definition"/>
	<element name="DefinitionCollection" type="gml:DictionaryType" substitutionGroup="gml:Definition"/>
	<!-- ===================================================== -->
	<complexType name="DictionaryType">
		<annotation>
			<documentation>A non-abstract bag that is specialized for use as a dictionary which contains a set of definitions. These definitions are referenced from other places, in the same and different XML documents. In this restricted type, the inherited optional "description" element can be used for a description of this dictionary. The inherited optional "name" element can be used for the name(s) of this dictionary. The inherited "metaDataProperty" elements can be used to reference or contain more information about this dictionary. The inherited required gml:id attribute allows the dictionary to be referenced using this handle. </documentation>
		</annotation>
		<complexContent>
			<extension base="gml:DefinitionType">
				<sequence minOccurs="0" maxOccurs="unbounded">
					<choice>
						<element ref="gml:dictionaryEntry">
							<annotation>
								<documentation>An entry in this dictionary. The content of an entry can itself be a lower level dictionary or definition collection. This element follows the standard GML property model, so the value may be provided directly or by reference. Note that if the value is provided by reference, this definition does not carry a handle (gml:id) in this context, so does not allow external references to this specific entry in this context. When used in this way the referenced definition will usually be in a dictionary in the same XML document. </documentation>
							</annotation>
						</element>
						<element ref="gml:indirectEntry">
							<annotation>
								<documentation>An identified reference to a remote entry in this dictionary, to be used when this entry should be identified to allow external references to this specific entry. </documentation>
							</annotation>
						</element>
					</choice>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- ===================================================== -->
	<element name="dictionaryEntry" type="gml:DictionaryEntryType"/>
	<element name="definitionMember" type="gml:DictionaryEntryType" substitutionGroup="gml:dictionaryEntry"/>
	<!-- ===================================================== -->
	<complexType name="DictionaryEntryType">
		<annotation>
			<documentation>An entry in a dictionary of definitions. An instance of this type contains or refers to a definition object.  

The number of definitions contained in this dictionaryEntry is restricted to one, but a DefinitionCollection or Dictionary that contains multiple definitions can be substituted if needed. Specialized descendents of this dictionaryEntry might be restricted in an application schema to allow only including specified types of definitions as valid entries in a dictionary. </documentation>
		</annotation>
		<sequence minOccurs="0">
			<element ref="gml:Definition">
				<annotation>
					<documentation>This element in a dictionary entry contains the actual definition. </documentation>
				</annotation>
			</element>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup">
			<annotation>
				<documentation>A non-identified reference to a remote entry in this dictionary, to be used when this entry need not be identified to allow external references to this specific entry. The remote entry referenced will usually be in a dictionary in the same XML document. This element will usually be used in dictionaries that are inside of another dictionary. </documentation>
			</annotation>
		</attributeGroup>
	</complexType>
	<!-- ===================================================== -->
	<element name="indirectEntry" type="gml:IndirectEntryType"/>
	<!-- ===================================================== -->
	<complexType name="IndirectEntryType">
		<annotation>
			<documentation>An entry in a dictionary of definitions that contains a GML object which references a remote definition object. This entry is expected to be convenient in allowing multiple elements in one XML document to contain short (abbreviated XPointer) references, which are resolved to an external definition provided in a Dictionary element in the same XML document. Specialized descendents of this dictionaryEntry might be restricted in an application schema to allow only including specified types of definitions as valid entries in a dictionary. </documentation>
		</annotation>
		<sequence>
			<element ref="gml:DefinitionProxy"/>
		</sequence>
	</complexType>
	<!-- ===================================================== -->
	<element name="DefinitionProxy" type="gml:DefinitionProxyType" substitutionGroup="gml:Definition"/>
	<!-- ===================================================== -->
	<complexType name="DefinitionProxyType">
		<annotation>
			<documentation>A proxy entry in a dictionary of definitions. An element of this type contains a reference to a remote definition object. This entry is expected to be convenient in allowing multiple elements in one XML document to contain short (abbreviated XPointer) references, which are resolved to an external definition provided in a Dictionary element in the same XML document. </documentation>
		</annotation>
		<complexContent>
			<extension base="gml:DefinitionType">
				<sequence>
					<element ref="gml:definitionRef">
						<annotation>
							<documentation>A reference to a remote entry in this dictionary, used when this dictionary entry is identified to allow external references to this specific entry. The remote entry referenced can be in a dictionary in the same or different XML document. </documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- ===================================================== -->
	<element name="definitionRef" type="gml:ReferenceType"/>
	
	<element name="unitOfMeasure" type="gml:UnitOfMeasureType"/>
	<complexType name="UnitOfMeasureType">
		<annotation>
			<documentation>Reference to a unit of measure definition that applies to all the numerical values described by the element containing this element. Notice that a complexType which needs to include the uom attribute can do so by extending this complexType. Alternately, this complexType can be used as a pattern for a new complexType.</documentation>
		</annotation>
		<sequence/>
		<attribute name="uom" type="anyURI" use="required">
			<annotation>
				<documentation>Reference to a unit of measure definition, usually within the same XML document but possibly outside the XML document which contains this reference. For a reference within the same XML document, the "#" symbol should be used, followed by a text abbreviation of the unit name. However, the "#" symbol may be optional, and still may be interpreted as a reference.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<!-- =========================================================== -->
	<element name="UnitDefinition" type="gml:UnitDefinitionType" substitutionGroup="gml:Definition"/>
	<!-- =========================================================== -->
	<complexType name="UnitDefinitionType">
		<annotation>
			<documentation>Definition of a unit of measure (or uom). The definition includes a quantityType property, which indicates the phenomenon to which the units apply, and a catalogSymbol, which gives the short symbol used for this unit. This element is used when the relationship of this unit to other units or units systems is unknown.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:DefinitionType">
				<sequence>
					<element ref="gml:quantityType"/>
					<element ref="gml:catalogSymbol" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="BaseUnit" type="gml:BaseUnitType" substitutionGroup="gml:UnitDefinition"/>
	<!-- =========================================================== -->
	<complexType name="BaseUnitType">
		<annotation>
			<documentation>Definition of a unit of measure which is a base unit from the system of units.  A base unit cannot be derived by combination of other base units within this system.  Sometimes known as "fundamental unit".</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:UnitDefinitionType">
				<sequence>
					<element name="unitsSystem" type="gml:ReferenceType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="DerivedUnit" type="gml:DerivedUnitType" substitutionGroup="gml:UnitDefinition"/>
	<!-- ============================================================ -->
	<complexType name="DerivedUnitType">
		<annotation>
			<documentation>Definition of a unit of measure which is defined through algebraic combination of more primitive units, which are usually base units from a particular system of units. Derived units based directly on base units are usually preferred for quantities other than the base units or fundamental quantities within a system.  If a derived unit is not the preferred unit, the ConventionalUnit element should be used instead.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:UnitDefinitionType">
				<sequence>
					<element ref="gml:derivationUnitTerm" maxOccurs="unbounded"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="ConventionalUnit" type="gml:ConventionalUnitType" substitutionGroup="gml:UnitDefinition"/>
	<!-- =========================================================== -->
	<complexType name="ConventionalUnitType">
		<annotation>
			<documentation>Definition of a unit of measure which is related to a preferred unit for this quantity type through a conversion formula.  A method for deriving this unit by algebraic combination of more primitive units, may also be provided.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:UnitDefinitionType">
				<sequence>
					<choice>
						<element ref="gml:conversionToPreferredUnit"/>
						<element ref="gml:roughConversionToPreferredUnit"/>
					</choice>
					<element ref="gml:derivationUnitTerm" minOccurs="0" maxOccurs="unbounded"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="quantityType" type="gml:StringOrRefType">
		<annotation>
			<documentation>Informal description of the phenomenon or type of quantity that is measured or observed. For example, "length", "angle", "time", "pressure", or "temperature". When the quantity is the result of an observation or measurement, this term is known as Observable Type or Measurand.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<element name="catalogSymbol" type="gml:CodeType">
		<annotation>
			<documentation>For global understanding of a unit of measure, it is often possible to reference an item in a catalog of units, using a symbol in that catalog. The "codeSpace" attribute in "CodeType" identifies a namespace for the catalog symbol value, and might reference the catalog. The "string" value in "CodeType" contains the value of a symbol that is unique within this catalog namespace. This symbol often appears explicitly in the catalog, but it could be a combination of symbols using a specified algebra of units. For example, the symbol "cm" might indicate that it is the "m" symbol combined with the "c" prefix.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<element name="derivationUnitTerm" type="gml:DerivationUnitTermType"/>
	<!-- =========================================================== -->
	<complexType name="DerivationUnitTermType">
		<annotation>
			<documentation>Definition of one unit term for a derived unit of measure. This unit term references another unit of measure (uom) and provides an integer exponent applied to that unit in defining the compound unit. The exponent can be positive or negative, but not zero.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:UnitOfMeasureType">
				<attribute name="exponent" type="integer"/>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="conversionToPreferredUnit" type="gml:ConversionToPreferredUnitType">
		<annotation>
			<documentation>This element is included when this unit has an accurate conversion to the preferred unit for this quantity type.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<element name="roughConversionToPreferredUnit" type="gml:ConversionToPreferredUnitType">
		<annotation>
			<documentation>This element is included when the correct definition of this unit is unknown, but this unit has a rough or inaccurate conversion to the preferred unit for this quantity type.</documentation>
		</annotation>
	</element>
	<!-- =========================================================== -->
	<complexType name="ConversionToPreferredUnitType">
		<annotation>
			<documentation>Relation of a unit to the preferred unit for this quantity type, specified by an arithmetic conversion (scaling and/or offset). A preferred unit is either a base unit or a derived unit selected for all units of one quantity type. The mandatory attribute "uom" shall reference the preferred unit that this conversion applies to. The conversion is specified by one of two alternative elements: "factor" or "formula".</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:UnitOfMeasureType">
				<choice>
					<element name="factor" type="double">
						<annotation>
							<documentation>Specification of the scale factor by which a value using this unit of measure can be multiplied to obtain the corresponding value using the preferred unit of measure.</documentation>
						</annotation>
					</element>
					<element name="formula" type="gml:FormulaType">
						<annotation>
							<documentation>Specification of the formula by which a value using this unit of measure can be converted to obtain the corresponding value using the preferred unit of measure.</documentation>
						</annotation>
					</element>
				</choice>
			</extension>
		</complexContent>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="FormulaType">
		<annotation>
			<documentation>Paremeters of a simple formula by which a value using this unit of measure can be converted to the corresponding value using the preferred unit of measure. The formula element contains elements a, b, c and d, whose values use the XML Schema type "double". These values are used in the formula y = (a + bx) / (c + dx), where x is a value using this unit, and y is the corresponding value using the preferred unit. The elements a and d are optional, and if values are not provided, those parameters are considered to be zero. If values are not provided for both a and d, the formula is equivalent to a fraction with numerator and denominator parameters.</documentation>
		</annotation>
		<sequence>
			<element name="a" type="double" minOccurs="0"/>
			<element name="b" type="double"/>
			<element name="c" type="double"/>
			<element name="d" type="double" minOccurs="0"/>
		</sequence>
	</complexType>
	
	<element name="measure" type="gml:MeasureType"/>
	<!-- =========================================================== -->
	<complexType name="LengthType">
		<annotation>
			<documentation>Value of a length (or distance) quantity, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a length, such as metres or feet.</documentation>
		</annotation>
		<simpleContent>
			<restriction base="gml:MeasureType"/>
		</simpleContent>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="ScaleType">
		<annotation>
			<documentation>Value of a scale factor (or ratio) that has no physical unit. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a scale factor, such as percent, permil, or parts-per-million.</documentation>
		</annotation>
		<simpleContent>
			<restriction base="gml:MeasureType"/>
		</simpleContent>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="TimeType">
		<annotation>
			<documentation>Value of a time or temporal quantity, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a time value, such as seconds or weeks.</documentation>
		</annotation>
		<simpleContent>
			<restriction base="gml:MeasureType"/>
		</simpleContent>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="GridLengthType">
		<annotation>
			<documentation>Value of a length (or distance) quantity in a grid, where the grid spacing does not have any associated physical units, or does not have a constant physical spacing. This grid length will often be used in a digital image grid, where the base units are likely to be pixel spacings. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for length along the axes of a grid, such as pixel spacings or grid spacings.</documentation>
		</annotation>
		<simpleContent>
			<restriction base="gml:MeasureType"/>
		</simpleContent>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="AreaType">
		<annotation>
			<documentation>Value of a spatial area quantity, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for an area, such as square metres or square miles.</documentation>
		</annotation>
		<simpleContent>
			<restriction base="gml:MeasureType"/>
		</simpleContent>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="VolumeType">
		<annotation>
			<documentation>Value of a spatial volume quantity, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a volume, such as cubic metres or cubic feet.</documentation>
		</annotation>
		<simpleContent>
			<restriction base="gml:MeasureType"/>
		</simpleContent>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="SpeedType">
		<annotation>
			<documentation>Value of a speed, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a velocity, such as metres per second or miles per hour.</documentation>
		</annotation>
		<simpleContent>
			<restriction base="gml:MeasureType"/>
		</simpleContent>
	</complexType>
	<!-- =========================================================== -->
	<complexType name="AngleChoiceType">
		<annotation>
			<documentation>Value of an angle quantity provided in either degree-minute-second format or single value format.</documentation>
		</annotation>
		<choice>
			<element ref="gml:angle"/>
			<element ref="gml:dmsAngle"/>
		</choice>
	</complexType>
	<!-- =========================================================== -->
	<element name="angle" type="gml:MeasureType"/>
	<!-- =========================================================== -->
	<complexType name="AngleType">
		<annotation>
			<documentation>Value of an angle quantity recorded as a single number, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for an angle, such as degrees or radians.</documentation>
		</annotation>
		<simpleContent>
			<restriction base="gml:MeasureType"/>
		</simpleContent>
	</complexType>
	<!-- =========================================================== -->
	<element name="dmsAngle" type="gml:DMSAngleType"/>
	<!-- =========================================================== -->
	<complexType name="DMSAngleType">
		<annotation>
			<documentation>Angle value provided in degree-minute-second or degree-minute format.</documentation>
		</annotation>
		<sequence>
			<element ref="gml:degrees"/>
			<choice minOccurs="0">
				<element ref="gml:decimalMinutes"/>
				<sequence>
					<element ref="gml:minutes"/>
					<element ref="gml:seconds" minOccurs="0"/>
				</sequence>
			</choice>
		</sequence>
	</complexType>
	<!-- =========================================================== -->
	<element name="degrees" type="gml:DegreesType"/>
	<!-- =========================================================== -->
	<complexType name="DegreesType">
		<annotation>
			<documentation>Integer number of degrees, plus the angle direction. This element can be used for geographic Latitude and Longitude. For Latitude, the XML attribute direction can take the values "N" or "S", meaning North or South of the equator. For Longitude, direction can take the values "E" or "W", meaning East or West of the prime meridian. This element can also be used for other angles. In that case, the direction can take the values "+" or "-" (of SignType), in the specified rotational direction from a specified reference direction.</documentation>
		</annotation>
		<simpleContent>
			<extension base="gml:DegreeValueType">
				<attribute name="direction">
					<simpleType>
						<union>
							<simpleType>
								<restriction base="string">
									<enumeration value="N"/>
									<enumeration value="E"/>
									<enumeration value="S"/>
									<enumeration value="W"/>
								</restriction>
							</simpleType>
							<simpleType>
								<restriction base="gml:SignType"/>
							</simpleType>
						</union>
					</simpleType>
				</attribute>
			</extension>
		</simpleContent>
	</complexType>
	<!-- =========================================================== -->
	<simpleType name="DegreeValueType">
		<annotation>
			<documentation>Integer number of degrees in a degree-minute-second or degree-minute angular value, without indication of direction.</documentation>
		</annotation>
		<restriction base="nonNegativeInteger">
			<maxInclusive value="359"/>
		</restriction>
	</simpleType>
	<!-- =========================================================== -->
	<element name="decimalMinutes" type="gml:DecimalMinutesType"/>
	<!-- =========================================================== -->
	<simpleType name="DecimalMinutesType">
		<annotation>
			<documentation>Decimal number of arc-minutes in a degree-minute angular value.</documentation>
		</annotation>
		<restriction base="decimal">
			<minInclusive value="0.00"/>
			<maxExclusive value="60.00"/>
		</restriction>
	</simpleType>
	<!-- =========================================================== -->
	<element name="minutes" type="gml:ArcMinutesType"/>
	<!-- =========================================================== -->
	<simpleType name="ArcMinutesType">
		<annotation>
			<documentation>Integer number of arc-minutes in a degree-minute-second angular value.</documentation>
		</annotation>
		<restriction base="nonNegativeInteger">
			<maxInclusive value="59"/>
		</restriction>
	</simpleType>
	<!-- =========================================================== -->
	<element name="seconds" type="gml:ArcSecondsType"/>
	<!-- =========================================================== -->
	<simpleType name="ArcSecondsType">
		<annotation>
			<documentation>Number of arc-seconds in a degree-minute-second angular value.</documentation>
		</annotation>
		<restriction base="decimal">
			<minInclusive value="0.00"/>
			<maxExclusive value="60.00"/>
		</restriction>
	</simpleType>
    
    <!-- ========== temporal.xsd ========== -->
  <element name="_TimeObject" type="gml:AbstractTimeObjectType" abstract="true" substitutionGroup="gml:_GML">
		<annotation>
			<documentation xml:lang="en">This abstract element acts as the head of the substitution group for temporal primitives and complexes.</documentation>
		</annotation>
	</element>
	<complexType name="AbstractTimeObjectType" abstract="true">
		<annotation>
			<documentation xml:lang="en">The abstract supertype for temporal objects.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractGMLType"/>
		</complexContent>
	</complexType>
	<!-- ==== Time Primitive ===== -->
	<element name="_TimePrimitive" type="gml:AbstractTimePrimitiveType" abstract="true" substitutionGroup="gml:_TimeObject">
		<annotation>
			<documentation xml:lang="en">This abstract element acts as the head of the substitution group for temporal primitives.</documentation>
		</annotation>
	</element>
	<!-- ===================================== -->
	<complexType name="AbstractTimePrimitiveType" abstract="true">
		<annotation>
			<documentation xml:lang="en">The abstract supertype for temporal primitives.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractTimeObjectType">
				<sequence>
					<element name="relatedTime" type="gml:RelatedTimeType" minOccurs="0" maxOccurs="unbounded"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- ================================================================== -->
	<complexType name="TimePrimitivePropertyType">
		<sequence minOccurs="0">
			<element ref="gml:_TimePrimitive"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup"/>
	</complexType>
	<!-- ================================================================== -->
	<complexType name="RelatedTimeType">
		<complexContent>
			<extension base="gml:TimePrimitivePropertyType">
				<attribute name="relativePosition">
					<simpleType>
						<restriction base="string">
							<enumeration value="Before"/>
							<enumeration value="After"/>
							<enumeration value="Begins"/>
							<enumeration value="Ends"/>
							<enumeration value="During"/>
							<enumeration value="Equals"/>
							<enumeration value="Contains"/>
							<enumeration value="Overlaps"/>
							<enumeration value="Meets"/>
							<enumeration value="OverlappedBy"/>
							<enumeration value="MetBy"/>
							<enumeration value="BegunBy"/>
							<enumeration value="EndedBy"/>
						</restriction>
					</simpleType>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<!-- ==== Time Complex ===== -->
	<element name="_TimeComplex" type="gml:AbstractTimeComplexType" abstract="true" substitutionGroup="gml:_TimeObject">
		<annotation>
			<documentation xml:lang="en">This abstract element acts as the head of the substitution group for temporal complexes. 
			Temporal complex is an aggregation of temporal primitives as its components, 
			represents a temporal geometric complex and a temporal topology complex. 
			N.B. Temporal geometric complex is not defined in this schema.</documentation>
		</annotation>
	</element>
	<!-- ================================================================== -->
	<complexType name="AbstractTimeComplexType" abstract="true">
		<annotation>
			<documentation xml:lang="en">The abstract supertype for temporal complexes.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractTimeObjectType"/>
		</complexContent>
	</complexType>
	<!-- ==== Time Geometric Primitive ===== -->
	<element name="_TimeGeometricPrimitive" type="gml:AbstractTimeGeometricPrimitiveType" abstract="true" substitutionGroup="gml:_TimePrimitive">
		<annotation>
			<documentation xml:lang="en">This abstract element acts as the head of the substitution group for temporal geometric primitives.</documentation>
		</annotation>
	</element>
	<!-- ===================================== -->
	<complexType name="AbstractTimeGeometricPrimitiveType" abstract="true">
		<annotation>
			<documentation xml:lang="en">The abstract supertype for temporal geometric primitives.
       A temporal geometry must be associated with a temporal reference system via URI. 
       The Gregorian calendar with UTC is the default reference system, following ISO 
       8601. Other reference systems in common use include the GPS calendar and the 
       Julian calendar.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractTimePrimitiveType">
				<attribute name="frame" type="anyURI" use="optional" default="#ISO-8601"/>
			</extension>
		</complexContent>
	</complexType>
	<!-- ================================================================== -->
	<complexType name="TimeGeometricPrimitivePropertyType">
		<sequence minOccurs="0">
			<element ref="gml:_TimeGeometricPrimitive"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup"/>
	</complexType>
	<!-- ==== Time Instant ===== -->
	<element name="TimeInstant" type="gml:TimeInstantType" substitutionGroup="gml:_TimeGeometricPrimitive"/>
	<!-- ===================================== -->
	<complexType name="TimeInstantType">
		<annotation>
			<documentation>Omit back-pointers begunBy, endedBy.</documentation>
		</annotation>
		<complexContent>
			<extension base="gml:AbstractTimeGeometricPrimitiveType">
				<sequence>
					<element ref="gml:timePosition"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- ================================================================== -->
	<complexType name="TimeInstantPropertyType">
		<sequence minOccurs="0">
			<element ref="gml:TimeInstant"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup"/>
	</complexType>
	<!-- ==== Time Period ===== -->
	<element name="TimePeriod" type="gml:TimePeriodType" substitutionGroup="gml:_TimeGeometricPrimitive"/>
	<!-- ===================================== -->
	<complexType name="TimePeriodType">
		<complexContent>
			<extension base="gml:AbstractTimeGeometricPrimitiveType">
				<sequence>
					<choice>
						<element name="beginPosition" type="gml:TimePositionType"/>
						<element name="begin" type="gml:TimeInstantPropertyType"/>
					</choice>
					<choice>
						<element name="endPosition" type="gml:TimePositionType"/>
						<element name="end" type="gml:TimeInstantPropertyType"/>
					</choice>
					<group ref="gml:timeLength" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!-- ================================================================== -->
	<complexType name="TimePeriodPropertyType">
		<sequence minOccurs="0">
			<element ref="gml:TimePeriod"/>
		</sequence>
		<attributeGroup ref="gml:AssociationAttributeGroup"/>
	</complexType>
	<!-- ==== duration & interval ===== -->
	<group name="timeLength">
		<annotation>
			<documentation>This model group is provided as an alternative to the abstract susbstitutionGroup head _timeLength.
		ISO 19136 comment 411</documentation>
		</annotation>
		<choice>
			<element ref="gml:duration"/>
			<element ref="gml:timeInterval"/>
		</choice>
	</group>
	<!-- ================================================================== -->
	<element name="duration" type="duration">
		<annotation>
			<documentation xml:lang="en">This element is an instance of the primitive xsd:duration simple type to 
      enable use of the ISO 8601 syntax for temporal length (e.g. P5DT4H30M). 
      It is a valid subtype of TimeDurationType according to section 3.14.6, 
      rule 2.2.4 in XML Schema, Part 1.</documentation>
		</annotation>
	</element>
	<!-- ================================================================== -->
	<element name="timeInterval" type="gml:TimeIntervalLengthType">
		<annotation>
			<documentation>This element is a valid subtype of TimeDurationType 
			according to section 3.14.6, rule 2.2.4 in XML Schema, Part 1.</documentation>
		</annotation>
	</element>
	<!-- ===================================== -->
	<complexType name="TimeIntervalLengthType" final="#all">
		<annotation>
			<documentation xml:lang="en">This type extends the built-in xsd:decimal simple type to allow floating-point 
      values for temporal length. According to  the ISO 11404 model you have to use 
      positiveInteger together with appropriate values for radix and factor. The 
      resolution of the time interval is to one radix ^(-factor) of the specified 
      time unit (e.g. unit="second", radix="10", factor="3" specifies a resolution 
      of milliseconds). It is a subtype of TimeDurationType.</documentation>
		</annotation>
		<simpleContent>
			<extension base="decimal">
				<attribute name="unit" type="gml:TimeUnitType" use="required"/>
				<attribute name="radix" type="positiveInteger" use="optional"/>
				<attribute name="factor" type="integer" use="optional"/>
			</extension>
		</simpleContent>
	</complexType>
	<!-- ================================================================== -->
	<simpleType name="TimeUnitType">
		<annotation>
			<documentation xml:lang="en">Standard units for measuring time intervals (see ISO 31-1).</documentation>
		</annotation>
		<union>
			<simpleType>
				<restriction base="string">
					<enumeration value="year"/>
					<enumeration value="day"/>
					<enumeration value="hour"/>
					<enumeration value="minute"/>
					<enumeration value="second"/>
				</restriction>
			</simpleType>
			<simpleType>
				<restriction base="string">
					<pattern value="other:\w{2,}"/>
				</restriction>
			</simpleType>
		</union>
	</simpleType>
	<!-- ==== Time Position ===== -->
	<element name="timePosition" type="gml:TimePositionType">
		<annotation>
			<documentation>Direct representation of a temporal position</documentation>
		</annotation>
	</element>
	<!-- ================================================================== -->
	<complexType name="TimePositionType" final="#all">
		<annotation>
			<documentation xml:lang="en">Direct representation of a temporal position. 
      Indeterminate time values are also allowed, as described in ISO 19108. The indeterminatePosition 
      attribute can be used alone or it can qualify a specific value for temporal position (e.g. before 
      2002-12, after 1019624400). 
      For time values that identify position within a calendar, the calendarEraName attribute provides 
      the name of the calendar era to which the date is referenced (e.g. the Meiji era of the Japanese calendar).</documentation>
		</annotation>
		<simpleContent>
			<extension base="gml:TimePositionUnion">
				<attribute name="frame" type="anyURI" use="optional" default="#ISO-8601"/>
				<attribute name="calendarEraName" type="string" use="optional"/>
				<attribute name="indeterminatePosition" type="gml:TimeIndeterminateValueType" use="optional"/>
			</extension>
		</simpleContent>
	</complexType>
	<!-- ================================================================== -->
	<simpleType name="TimePositionUnion">
		<annotation>
			<documentation xml:lang="en">The ISO 19108:2002 hierarchy of subtypes for temporal position are collapsed 
      by defining a union of XML Schema simple types for indicating temporal position relative 
      to a specific reference system. 
      
      Dates and dateTime may be indicated with varying degrees of precision.  
      dateTime by itself does not allow right-truncation, except for fractions of seconds. 
      When used with non-Gregorian calendars based on years, months, days, 
      the same lexical representation should still be used, with leading zeros added if the 
      year value would otherwise have fewer than four digits.  
      
      An ordinal position may be referenced via URI identifying the definition of an ordinal era.  
      
      A time coordinate value is indicated as a decimal (e.g. UNIX time, GPS calendar).</documentation>
		</annotation>
		<union memberTypes="gml:CalDate time dateTime anyURI decimal"/>
	</simpleType>
	<!-- ================================================================== -->
	<simpleType name="CalDate">
		<annotation>
			<documentation xml:lang="en">Calendar dates may be indicated with varying degrees of precision, 
      using year, year-month, date. 
      When used with non-Gregorian calendars based on years, months, days, 
      the same lexical representation should still be used, with leading zeros added if the 
      year value would otherwise have fewer than four digits.  
      time is used for a position that recurs daily (see clause 5.4.4.2 of ISO 19108:2002).</documentation>
		</annotation>
		<union memberTypes="date gYearMonth gYear"/>
	</simpleType>
	<!-- ================================================================== -->
	<simpleType name="TimeIndeterminateValueType">
		<annotation>
			<documentation xml:lang="en">This enumerated data type specifies values for indeterminate positions.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="after"/>
			<enumeration value="before"/>
			<enumeration value="now"/>
			<enumeration value="unknown"/>
		</restriction>
	</simpleType>
	<!-- ==== Convenience properties ==== -->
	<element name="validTime" type="gml:TimePrimitivePropertyType"/>
</schema>