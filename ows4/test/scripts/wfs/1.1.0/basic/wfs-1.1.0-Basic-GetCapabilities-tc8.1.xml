<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
 xmlns="http://www.occamlab.com/ctl"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:myparsers="http://cite.opengeospatial.org/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wfs="http://www.opengis.net/wfs"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.occamlab.com/ctl ../../../../../apps/engine/resources/com/occamlab/te/schemas/ctl.xsd">

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc8.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Parameter ordering in KVP-encoded query strings is not significant.</assertion>
      <comment>This test issues two GetCapabilities request using HTTP GET to the WFS server under test. The requests will have the KVP elements in different ordering, yet should give the same result.</comment>
      <link>wfs-1.1.0-Basic-GetCapabilities-atc8</link>
      <link>OGC 04-094, 14.2.1, p.94</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<!--<myparsers:XMLValidatingParser.WFS/>-->
				</request>
			</xsl:variable>
			
			<xsl:variable name="request2">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="request">GetCapabilities</param>
					<param name="version">1.1.0</param>
					<param name="service">WFS</param>
					<!--<myparsers:XMLValidatingParser.WFS/>-->
				</request>
			</xsl:variable>			
			
			<xsl:if test="not($request1/*) or not($request2/*)">
				<ctl:fail/>
			</xsl:if>

			<xsl:if test="$request1/* and $request2/*">
				<xsl:if test="$request1 != $request2">
					<ctl:fail/>
				</xsl:if>	
			</xsl:if>
				
		</code>
	</test>
</ctl:package>
